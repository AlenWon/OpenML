{
    "docs": [
        {
            "location": "/",
            "text": "OpenML Developers\n\n\nOpenML is an open source project, \nhosted on GitHub\n. We welcome everybody to help improve OpenML, and make it more useful for everyone. If you want to integrate your own machine learning tools with OpenML, check out the \nAPI Docs\n and \nUser Guides\n. \n\n\nWe always love to welcome new contributers, and will gladly help you in any way possible.",
            "title": "Welcome"
        },
        {
            "location": "/#openml-developers",
            "text": "OpenML is an open source project,  hosted on GitHub . We welcome everybody to help improve OpenML, and make it more useful for everyone. If you want to integrate your own machine learning tools with OpenML, check out the  API Docs  and  User Guides .   We always love to welcome new contributers, and will gladly help you in any way possible.",
            "title": "OpenML Developers"
        },
        {
            "location": "/Contributing/",
            "text": "Project vision\n\n\nWe want to make machine learning and data analysis \nsimple\n, \naccessible\n, \ncollaborative\n and \nopen\n with an optimal \ndivision of labour\n between computers and humans. \n\n\nWant to get involved?\n\n\nAwesome, we're happy to have you! \n \n\n\nOpenML is dependent on the community. If you want to help, please email us (\nopenmlHQ@googlegroups.com\n). If you feel already comfortable you can help by opening issues or make a pull request on GitHub. We also have regular workshops you can join (they are announced on openml.org).\n\n\nWho are we?\n\n\nWe are a group of friendly people who are excited about open science and machine learning. A list of people currently involved can be found \nhere\n.\n\n\nWe need help!\n\n\nWe are currently looking for help with:  \n\n\n\n\nUser feedback (best via GitHub issues, but email is also fine)\n\n\nFrontend / UX / Design of the website \n\n\nBackend / API \n\n\nOutreach / making OpenML better known (especially in non-ML-communities, where people have data but no analysis experise)\n\n\nHelping with the interfaces (\nPython\n, \nWEKA\n, \nMOA\n, \nRapidMiner\n, \nJava\n, \nR\n; find the links to GitHub repos \nhere\n)\n\n\nHelping with documenting the interfaces or the API\n\n\nWhat could we do better to get new users started? Help us to figure out what is difficult to understand about OpenML. If you \nare\n a new user, you are the perfect person for this!\n\n\n\n\nBeginner issues\n\n\nCheck out the issues labeled \nGood first issue\n or \nhelp wanted\n\n\nChange the world\n\n\nIf you have your own ideas on how you want to contribute, please \nget in touch\n! We are very friendly and open to new ideas",
            "title": "How to contribute"
        },
        {
            "location": "/Contributing/#project-vision",
            "text": "We want to make machine learning and data analysis  simple ,  accessible ,  collaborative  and  open  with an optimal  division of labour  between computers and humans.",
            "title": "Project vision"
        },
        {
            "location": "/Contributing/#want-to-get-involved",
            "text": "Awesome, we're happy to have you!     OpenML is dependent on the community. If you want to help, please email us ( openmlHQ@googlegroups.com ). If you feel already comfortable you can help by opening issues or make a pull request on GitHub. We also have regular workshops you can join (they are announced on openml.org).",
            "title": "Want to get involved?"
        },
        {
            "location": "/Contributing/#who-are-we",
            "text": "We are a group of friendly people who are excited about open science and machine learning. A list of people currently involved can be found  here .",
            "title": "Who are we?"
        },
        {
            "location": "/Contributing/#we-need-help",
            "text": "We are currently looking for help with:     User feedback (best via GitHub issues, but email is also fine)  Frontend / UX / Design of the website   Backend / API   Outreach / making OpenML better known (especially in non-ML-communities, where people have data but no analysis experise)  Helping with the interfaces ( Python ,  WEKA ,  MOA ,  RapidMiner ,  Java ,  R ; find the links to GitHub repos  here )  Helping with documenting the interfaces or the API  What could we do better to get new users started? Help us to figure out what is difficult to understand about OpenML. If you  are  a new user, you are the perfect person for this!",
            "title": "We need help!"
        },
        {
            "location": "/Contributing/#beginner-issues",
            "text": "Check out the issues labeled  Good first issue  or  help wanted",
            "title": "Beginner issues"
        },
        {
            "location": "/Contributing/#change-the-world",
            "text": "If you have your own ideas on how you want to contribute, please  get in touch ! We are very friendly and open to new ideas",
            "title": "Change the world"
        },
        {
            "location": "/Communication-Channels/",
            "text": "We have several communication channels set up for different purposes:\n\n\nGitHub\n\n\n\n\nIssues (members and users can complain)\n\n\nRequest new features\n\n\n\n\nAnyone with a GitHub account can write issues. We are happy if people get involved by writing issues, so don't be shy \n \n\n\nSlack\n\n\n\n\nInformal communication\n\n\n\n\nWe use slack for day to day discussions and news. If you want to join the OpenML slack chat, please message us (\nopenmlHQ@googlegroups.com\n).\n\n\nMailing List\n\n\n\n\nInformation on upcoming workshop\n\n\nOther major information\n\n\nUrgent or important issues\n\n\n\n\nIf you want to receive information on major news or upcoming events, sign up for the \nmailing list\n. There is a privat mailing list for \nOpenML core members\n which you can contact by sending an e-mail to \nopenmlHQ@googlegroups.com\n.\n\n\nTwitter\n\n\n\n\nNews \n\n\nPublicly relevant information\n\n\n\n\nBlog\n\n\n\n\nTutorials\n\n\nNews\n\n\nInfo about papers\n\n\n\n\nHangout (google)\n\n\n\n\nCalls",
            "title": "Communication Channels"
        },
        {
            "location": "/Communication-Channels/#github",
            "text": "Issues (members and users can complain)  Request new features   Anyone with a GitHub account can write issues. We are happy if people get involved by writing issues, so don't be shy",
            "title": "GitHub"
        },
        {
            "location": "/Communication-Channels/#slack",
            "text": "Informal communication   We use slack for day to day discussions and news. If you want to join the OpenML slack chat, please message us ( openmlHQ@googlegroups.com ).",
            "title": "Slack"
        },
        {
            "location": "/Communication-Channels/#mailing-list",
            "text": "Information on upcoming workshop  Other major information  Urgent or important issues   If you want to receive information on major news or upcoming events, sign up for the  mailing list . There is a privat mailing list for  OpenML core members  which you can contact by sending an e-mail to  openmlHQ@googlegroups.com .",
            "title": "Mailing List"
        },
        {
            "location": "/Communication-Channels/#twitter",
            "text": "News   Publicly relevant information",
            "title": "Twitter"
        },
        {
            "location": "/Communication-Channels/#blog",
            "text": "Tutorials  News  Info about papers",
            "title": "Blog"
        },
        {
            "location": "/Communication-Channels/#hangout-google",
            "text": "Calls",
            "title": "Hangout (google)"
        },
        {
            "location": "/Core-team/",
            "text": "OpenML has many amazing contributors, which you can find on out \nteam website\n. Should you be a contributor, but not on this page, let us know!\n\n\nCurrent members of the core team are:\n\n\n\n\nJoaquin Vanschoren\n\n\nJan van Rijn\n\n\nBernd Bischl\n\n\nGiuseppe Casaliccio\n\n\nMatthias Feurer\n\n\nHeidi Seibold\n\n\n\n\nYou can contact us by emailing to \nopenmlHQ@googlegroups.com\n.\n\n\nTo get in touch with the broader community check out our \ncommunication channels\n.",
            "title": "Core team"
        },
        {
            "location": "/Basic-Concepts/",
            "text": "Researchers are encouraged to upload their experimental results on OpenML, so that these can be reused by anyone. Various high level papers  have been published that overview the design goals, benefits and opportunities (for example, at \nECML/PKDD 2013\n, \nSIGKDD Explorations\n and \nJMLR\n). However, there is no clear overview of the basic concepts upon which the platform is build. In this blog post I will review these, and discuss some best practices.\u00a0This page is a slightly updated version of \nthis blogpost\n\n\nData\n\n\nOne of the core components of OpenML are datasets. People can upload their datasets, and the system automatically organises these on line. An example of a dataset is the well-known \nIris dataset\n. It shows all features, once of these is identified as the 'default target attribute', although this concept is flexible. It also shows some automatically computed data qualities (or, meta-features). Each dataset has its own unique ID. Information about the dataset, the data features and the data qualities can be obtained automatically by means of the following API functions:\n* \nGet all available datasets\n\n* \nGet dataset\n (required the data id)\n* \nGet data features\n (requires the data id)\n* \nGet data qualities\n (requires the data id)\n\n\nTask types and\u00a0tasks\n\n\nA dataset alone does not constitute a scientific task. We must first agree on what types of results are expected to be shared. This is expressed in task types: they define what types of inputs are given, which types of output are expected to be returned, and what protocols should be used. For instance, classification tasks should include well-defined cross-validation procedures, labelled input data, and require predictions as outputs. The collection of all this information together is called a task. The Iris dataset has various tasks defined on it, \nfor example this one\n. Although the web-interface does not show it, this task formally describes the target attribute that should be modelled (in this case the same as the default target attribute of the dataset, but this is flexible), the quality estimation procedure (10-fold cross-validation), the evaluation measure (predictive accuracy) and the cross-validation folds. Useful API operations include:\n* \nGet all available tasks\n\n* \nGet all available tasks of a given type\n (e.g. get all Classification tasks, requires the id of the task type)\n* \nGet the details of a task\n (requires task id)\n\n\nCurrently, there are a wide range of task types defined on OpenML, including classification, regression, on line learning, clustering and subgroup discovery. Although this set can be extended, this is currently not a supported API operation (meaning that we will add them by hand). If you interested in task types that are currently not supported, please contact us.\u00a0\n\n\nFlows\n\n\nTasks can be 'solved' by classifiers (or algorithms, workflows, flows). OpenML stores references to these flows. It is important to stress that flows are actually ran on the computer of the user, only meta-information about the flow is stored on OpenML. This  information includes basic trivialities such as the creator, toolbox and compilation instructions, but also more formal description about hyper parameter. A flow can also contain subflows, for example, the flow Bagging can have a subflow 'Decision Tree' which would make the flow 'Bagging of Decision Trees'. A flow is distinguished by its name and 'external version', which are both provided by the uploader. When uploading a flow, it is important to think about a good naming convention for the both, for example, the git commit number could be used as external version, as this uniquely identifies a state of the code. Ideally, when two persons are using the same flow, they will use the same name and external version, so that results of the flows can be compared across tasks. (This is ensured when using the toolboxed in which OpenML is integrated, such as Weka, Scikit Learn and MLR). Useful API functions are:\n* \nList all flows\n\u00a0\n* \nList all my flows\n\n* \nGive details about a given flow\n (requires flow id)\n\n\nRuns\n\n\nWhenever a flow executes a task, this is called a run. The existence of runs is actually the main contribution of OpenML. Some experiments take weeks to complete, and having the results stored on OpenML helps other researchers reuse the experiments. The task description specifies which information should be uploaded in order to have a valid run, in most cases, for each cross-validation fold the predictions on the test set. This allows OpenML to calculate basic evaluation measures, such as predictive accuracy, ROC curves and many more. Also information about the flow and hyper parameter settings should be provided. Some useful API functions:\n* \nList all runs performed on a given task\n (requires task id, e.g., the iris task is 59)\n* \nCompare two flows on all tasks\n (requires a comma separated list of flow ids, e.g., 1720, 1721 for comparing k-nn with a decision tree)\n* And many more\u00a0...\n\n\nUsually, the result is in some XML or JSON format (depending on the preference of the user), linking together various task ids, flow ids, etc. In order for this to become meaningful, the user needs to perform other API tasks to get information about what flows were executed, what tasks and datasets were used, etc. Details about this will be provided in another post.\n\n\nSetups\n\n\nEvery run that is executed by a flow, contains information about the hyper parameter settings of the flow. A setup is the combination of all parameter settings of a given flow. OpenML internally links the result of a given run to a setup id. This way, experiments can be done across hyper parameter settings. For example,\n* \nCompare two setups on all tasks\n (requires a comma separated list of setup ids, e.g., 8994, 8995, 8996 for comparing multiple MLP configurations)\n\n\nAs setups constitute a complex concept, most of the operations concerning setups are hidden from the user. Hence, not all setup functions are properly documented yet. For example, these do not contain a page on the webinterface.",
            "title": "Basic Concepts"
        },
        {
            "location": "/Basic-Concepts/#data",
            "text": "One of the core components of OpenML are datasets. People can upload their datasets, and the system automatically organises these on line. An example of a dataset is the well-known  Iris dataset . It shows all features, once of these is identified as the 'default target attribute', although this concept is flexible. It also shows some automatically computed data qualities (or, meta-features). Each dataset has its own unique ID. Information about the dataset, the data features and the data qualities can be obtained automatically by means of the following API functions:\n*  Get all available datasets \n*  Get dataset  (required the data id)\n*  Get data features  (requires the data id)\n*  Get data qualities  (requires the data id)",
            "title": "Data"
        },
        {
            "location": "/Basic-Concepts/#task-types-and-tasks",
            "text": "A dataset alone does not constitute a scientific task. We must first agree on what types of results are expected to be shared. This is expressed in task types: they define what types of inputs are given, which types of output are expected to be returned, and what protocols should be used. For instance, classification tasks should include well-defined cross-validation procedures, labelled input data, and require predictions as outputs. The collection of all this information together is called a task. The Iris dataset has various tasks defined on it,  for example this one . Although the web-interface does not show it, this task formally describes the target attribute that should be modelled (in this case the same as the default target attribute of the dataset, but this is flexible), the quality estimation procedure (10-fold cross-validation), the evaluation measure (predictive accuracy) and the cross-validation folds. Useful API operations include:\n*  Get all available tasks \n*  Get all available tasks of a given type  (e.g. get all Classification tasks, requires the id of the task type)\n*  Get the details of a task  (requires task id)  Currently, there are a wide range of task types defined on OpenML, including classification, regression, on line learning, clustering and subgroup discovery. Although this set can be extended, this is currently not a supported API operation (meaning that we will add them by hand). If you interested in task types that are currently not supported, please contact us.",
            "title": "Task types and\u00a0tasks"
        },
        {
            "location": "/Basic-Concepts/#flows",
            "text": "Tasks can be 'solved' by classifiers (or algorithms, workflows, flows). OpenML stores references to these flows. It is important to stress that flows are actually ran on the computer of the user, only meta-information about the flow is stored on OpenML. This  information includes basic trivialities such as the creator, toolbox and compilation instructions, but also more formal description about hyper parameter. A flow can also contain subflows, for example, the flow Bagging can have a subflow 'Decision Tree' which would make the flow 'Bagging of Decision Trees'. A flow is distinguished by its name and 'external version', which are both provided by the uploader. When uploading a flow, it is important to think about a good naming convention for the both, for example, the git commit number could be used as external version, as this uniquely identifies a state of the code. Ideally, when two persons are using the same flow, they will use the same name and external version, so that results of the flows can be compared across tasks. (This is ensured when using the toolboxed in which OpenML is integrated, such as Weka, Scikit Learn and MLR). Useful API functions are:\n*  List all flows \u00a0\n*  List all my flows \n*  Give details about a given flow  (requires flow id)",
            "title": "Flows"
        },
        {
            "location": "/Basic-Concepts/#runs",
            "text": "Whenever a flow executes a task, this is called a run. The existence of runs is actually the main contribution of OpenML. Some experiments take weeks to complete, and having the results stored on OpenML helps other researchers reuse the experiments. The task description specifies which information should be uploaded in order to have a valid run, in most cases, for each cross-validation fold the predictions on the test set. This allows OpenML to calculate basic evaluation measures, such as predictive accuracy, ROC curves and many more. Also information about the flow and hyper parameter settings should be provided. Some useful API functions:\n*  List all runs performed on a given task  (requires task id, e.g., the iris task is 59)\n*  Compare two flows on all tasks  (requires a comma separated list of flow ids, e.g., 1720, 1721 for comparing k-nn with a decision tree)\n* And many more\u00a0...  Usually, the result is in some XML or JSON format (depending on the preference of the user), linking together various task ids, flow ids, etc. In order for this to become meaningful, the user needs to perform other API tasks to get information about what flows were executed, what tasks and datasets were used, etc. Details about this will be provided in another post.",
            "title": "Runs"
        },
        {
            "location": "/Basic-Concepts/#setups",
            "text": "Every run that is executed by a flow, contains information about the hyper parameter settings of the flow. A setup is the combination of all parameter settings of a given flow. OpenML internally links the result of a given run to a setup id. This way, experiments can be done across hyper parameter settings. For example,\n*  Compare two setups on all tasks  (requires a comma separated list of setup ids, e.g., 8994, 8995, 8996 for comparing multiple MLP configurations)  As setups constitute a complex concept, most of the operations concerning setups are hidden from the user. Hence, not all setup functions are properly documented yet. For example, these do not contain a page on the webinterface.",
            "title": "Setups"
        },
        {
            "location": "/OpenML-Docs/",
            "text": "The OpenML Documentation has grown organically over the years, often using different tools depending on the programming language and type of documentation. Here's an overview of the current status. We are currently working on harmonizing this as well and as soon as possible.\n\n\nGeneral Concepts\n\n\nOn the OpenML front page\n- Language: HTML\n- Source: \nhttps://github.com/openml/website/tree/master/openml_OS/views/pages/frontend/guide\n\n- Result: \nhttps://www.openml.org/guide/bootcamp\n\n- Deployment: Admin needs to pull on the server\n\n\nWiki page: \nhttps://github.com/openml/OpenML/wiki/Basic-Concepts\n\n\nOpenML Backend\n\n\nIn multiple pages of the WIKI: \nhttps://github.com/openml/OpenML/wiki\n\n\nREST API\n\n\nUses Swagger.io to generate a nice web interface that also allows trying out the API calls\n- Language: YAML/JSON\n- Source: \nhttps://app.swaggerhub.com/apis/openml/openml/1.0.0\n\n- Result: \nhttps://www.openml.org/api_docs\n\n- Deployment: Export from SwaggerHub, push to \nhttps://github.com/openml/website/blob/master/downloads/swagger.json\n\n\nThere is currently separate documentation for serving files:\n- Source: \nhttps://app.swaggerhub.com/apis/openml/openml_file/1.0.0\n\n- Result: \nhttps://www.openml.org/api_data_docs\n\n\nPython API\n\n\nUses Sphinx (\nhttp://www.sphinx-doc.org/en/stable/\n)\n- Language: reStructuredText\n- Source: \nhttps://github.com/openml/openml-python/tree/master/doc\n + Docstrings in Python code\n- Result: \nhttps://openml.github.io/openml-python\n\n- Deployment: CircleCI job that runs automatically when code is updated\n\n\nR API\n\n\nUser docs: Uses Vignettes (knitr) \n- Language: Rmarkdown\n- Source: \nhttps://github.com/openml/openml-r/tree/master/vignettes\n\n- Result: \nhttps://openml.github.io/openml-r/vignettes/OpenML.html\n\n- Deployment: Travis job that (should) run automatically when code is updated\n\n\nAPI docs: Uses Roxygen\n- Language: Rd files\n- Source: Docstrings in R code\n- Result: Rd files, viewed as help files in the R shell \nhttps://github.com/openml/openml-r/tree/master/man\n\n- Deployment: Manually pushed\n\n\nJava API\n\n\nWiki: \nhttps://github.com/openml/OpenML/wiki/Java-API\n\nJavadocs: \nhttps://www.openml.org/docs/\n  \n\n\nWEKA, MOA, RapidMiner integrations\n\n\nWiki: \nhttps://github.com/openml/OpenML/wiki\n\nE.g. WEKA: \nhttps://github.com/openml/OpenML/wiki/Weka",
            "title": "Editing Documentation"
        },
        {
            "location": "/OpenML-Docs/#general-concepts",
            "text": "On the OpenML front page\n- Language: HTML\n- Source:  https://github.com/openml/website/tree/master/openml_OS/views/pages/frontend/guide \n- Result:  https://www.openml.org/guide/bootcamp \n- Deployment: Admin needs to pull on the server  Wiki page:  https://github.com/openml/OpenML/wiki/Basic-Concepts",
            "title": "General Concepts"
        },
        {
            "location": "/OpenML-Docs/#openml-backend",
            "text": "In multiple pages of the WIKI:  https://github.com/openml/OpenML/wiki",
            "title": "OpenML Backend"
        },
        {
            "location": "/OpenML-Docs/#rest-api",
            "text": "Uses Swagger.io to generate a nice web interface that also allows trying out the API calls\n- Language: YAML/JSON\n- Source:  https://app.swaggerhub.com/apis/openml/openml/1.0.0 \n- Result:  https://www.openml.org/api_docs \n- Deployment: Export from SwaggerHub, push to  https://github.com/openml/website/blob/master/downloads/swagger.json  There is currently separate documentation for serving files:\n- Source:  https://app.swaggerhub.com/apis/openml/openml_file/1.0.0 \n- Result:  https://www.openml.org/api_data_docs",
            "title": "REST API"
        },
        {
            "location": "/OpenML-Docs/#python-api",
            "text": "Uses Sphinx ( http://www.sphinx-doc.org/en/stable/ )\n- Language: reStructuredText\n- Source:  https://github.com/openml/openml-python/tree/master/doc  + Docstrings in Python code\n- Result:  https://openml.github.io/openml-python \n- Deployment: CircleCI job that runs automatically when code is updated",
            "title": "Python API"
        },
        {
            "location": "/OpenML-Docs/#r-api",
            "text": "User docs: Uses Vignettes (knitr) \n- Language: Rmarkdown\n- Source:  https://github.com/openml/openml-r/tree/master/vignettes \n- Result:  https://openml.github.io/openml-r/vignettes/OpenML.html \n- Deployment: Travis job that (should) run automatically when code is updated  API docs: Uses Roxygen\n- Language: Rd files\n- Source: Docstrings in R code\n- Result: Rd files, viewed as help files in the R shell  https://github.com/openml/openml-r/tree/master/man \n- Deployment: Manually pushed",
            "title": "R API"
        },
        {
            "location": "/OpenML-Docs/#java-api",
            "text": "Wiki:  https://github.com/openml/OpenML/wiki/Java-API \nJavadocs:  https://www.openml.org/docs/",
            "title": "Java API"
        },
        {
            "location": "/OpenML-Docs/#weka-moa-rapidminer-integrations",
            "text": "Wiki:  https://github.com/openml/OpenML/wiki \nE.g. WEKA:  https://github.com/openml/OpenML/wiki/Weka",
            "title": "WEKA, MOA, RapidMiner integrations"
        },
        {
            "location": "/Weka/",
            "text": "OpenML is integrated in the Weka (Waikato Environment for Knowledge Analysis) Experimenter and the Command Line Interface.\n\n\nInstallation\n\n\nOpenML is available as a weka extension in the package manager:\n* \nDownload the latest version\n (3.7.13 or higher).\n* Launch Weka, or start from commandline: \n\n\n\n\njava -jar weka.jar \n* If you need more memory (e.g. 1GB), start as follows: \njava -Xmx1G -jar weka.jar\n* Open the package manager (Under 'Tools')\n* Select package \nOpenmlWeka\n and click install. Afterwards, restart WEKA.\n* From the Tools menu, open the 'OpenML Experimenter'.\n\n\n\n\nQuick Start (Graphical Interface)\n\n\n\n\nYou can solve OpenML Tasks in the Weka Experimenter, and automatically upload your experiments to OpenML (or store them locally).\n* From the Tools menu, open the 'OpenML Experimenter'.\n* Enter your \nAPI key\n in the top field (log in first). You can also store this in a config file (see below).\n* In the 'Tasks' panel, click the 'Add New' button to add new tasks. Insert the task id's as comma-separated values (e.g., '1,2,3,4,5'). Use the search function on OpenML to find interesting tasks and click the ID icon to list the ID's. In the future this search will also be integrated in WEKA.\n* Add algorithms in the \"Algorithm\" panel.\n* Go to the \"Run\" tab, and click on the \"Start\" button.\n* The experiment will be executed and sent to OpenML.org.\n* The runs will now appear on OpenML.org. You can follow their progress and check for errors on your profile page under 'Runs'.\n\n\nQuick Start (CommandLine Interface)\n\n\nThe Command Line interface is useful for running experiments automatically on a server, without using a GUI.\n\n\n\n\nCreate a config file called \nopenml.conf\n in a new directory called \n.openml\n in your home dir. It should contain the following line:\n\n\napi_key = YOUR_KEY\n\n\n\n\n\n\nExecute the following command: \n\n\njava -cp weka.jar openml.experiment.TaskBasedExperiment -T \n -C \n -- \n\n\n\n\n\n\nFor example, the following command will run Weka's J48 algorithm on Task 1: \n\n\njava -cp OpenWeka.beta.jar openml.experiment.TaskBasedExperiment -T 1 -C weka.classifiers.trees.J48\n\n\n\n\n\n\nThe following suffix will set some parameters of this classifier:\n\n\n-- -C 0.25 -M 2\n\n\n\n\n\n\n\n\nIssues\n\n\nPlease report any bugs that you may encounter in the issue tracker: \nhttps://github.com/openml/openml-weka\n\nOr email to \nj.n.van.rijn@liacs.leidenuniv.nl",
            "title": "Weka quickstart"
        },
        {
            "location": "/Weka/#installation",
            "text": "OpenML is available as a weka extension in the package manager:\n*  Download the latest version  (3.7.13 or higher).\n* Launch Weka, or start from commandline:    java -jar weka.jar \n* If you need more memory (e.g. 1GB), start as follows: \njava -Xmx1G -jar weka.jar\n* Open the package manager (Under 'Tools')\n* Select package  OpenmlWeka  and click install. Afterwards, restart WEKA.\n* From the Tools menu, open the 'OpenML Experimenter'.",
            "title": "Installation"
        },
        {
            "location": "/Weka/#quick-start-graphical-interface",
            "text": "You can solve OpenML Tasks in the Weka Experimenter, and automatically upload your experiments to OpenML (or store them locally).\n* From the Tools menu, open the 'OpenML Experimenter'.\n* Enter your  API key  in the top field (log in first). You can also store this in a config file (see below).\n* In the 'Tasks' panel, click the 'Add New' button to add new tasks. Insert the task id's as comma-separated values (e.g., '1,2,3,4,5'). Use the search function on OpenML to find interesting tasks and click the ID icon to list the ID's. In the future this search will also be integrated in WEKA.\n* Add algorithms in the \"Algorithm\" panel.\n* Go to the \"Run\" tab, and click on the \"Start\" button.\n* The experiment will be executed and sent to OpenML.org.\n* The runs will now appear on OpenML.org. You can follow their progress and check for errors on your profile page under 'Runs'.",
            "title": "Quick Start (Graphical Interface)"
        },
        {
            "location": "/Weka/#quick-start-commandline-interface",
            "text": "The Command Line interface is useful for running experiments automatically on a server, without using a GUI.   Create a config file called  openml.conf  in a new directory called  .openml  in your home dir. It should contain the following line:  api_key = YOUR_KEY    Execute the following command:   java -cp weka.jar openml.experiment.TaskBasedExperiment -T   -C   --     For example, the following command will run Weka's J48 algorithm on Task 1:   java -cp OpenWeka.beta.jar openml.experiment.TaskBasedExperiment -T 1 -C weka.classifiers.trees.J48    The following suffix will set some parameters of this classifier:  -- -C 0.25 -M 2",
            "title": "Quick Start (CommandLine Interface)"
        },
        {
            "location": "/Weka/#issues",
            "text": "Please report any bugs that you may encounter in the issue tracker:  https://github.com/openml/openml-weka \nOr email to  j.n.van.rijn@liacs.leidenuniv.nl",
            "title": "Issues"
        },
        {
            "location": "/MOA/",
            "text": "OpenML features extensive support for MOA. However currently this is implemented as a stand alone MOA compilation, using the latest version (as of May, 2014).\n\n\nDownload MOA for OpenML\n\n\nQuick Start\n\n\n\n\n\n\nDownload the standalone MOA environment above.\n\n\nFind your \nAPI key\n in your profile (log in first). Create a config file called \nopenml.conf\n in a \n.openml\n directory in your home dir. It should contain the following lines:\n\n\napi_key = YOUR_KEY\n\n\n\n\n\n\nLaunch the JAR file by double clicking on it, or launch from command-line using the following command:\n\n\njava -cp openmlmoa.beta.jar moa.gui.GUI\n\n\n\n\n\n\nSelect the task \nmoa.tasks.openml.OpenmlDataStreamClassification\n to evaluate a classifier on an OpenML task, and send the results to OpenML.\n\n\nOptionally, you can generate new streams using the Bayesian Network Generator: select the \nmoa.tasks.WriteStreamToArff\n task, with \nmoa.streams.generators.BayesianNetworkGenerator\n.",
            "title": "MOA quickstart"
        },
        {
            "location": "/MOA/#quick-start",
            "text": "Download the standalone MOA environment above.  Find your  API key  in your profile (log in first). Create a config file called  openml.conf  in a  .openml  directory in your home dir. It should contain the following lines:  api_key = YOUR_KEY    Launch the JAR file by double clicking on it, or launch from command-line using the following command:  java -cp openmlmoa.beta.jar moa.gui.GUI    Select the task  moa.tasks.openml.OpenmlDataStreamClassification  to evaluate a classifier on an OpenML task, and send the results to OpenML.  Optionally, you can generate new streams using the Bayesian Network Generator: select the  moa.tasks.WriteStreamToArff  task, with  moa.streams.generators.BayesianNetworkGenerator .",
            "title": "Quick Start"
        },
        {
            "location": "/Java-API/",
            "text": "The Java API allows you connect to OpenML from Java applications.\n\n\nJava Docs\n\n\nRead the full Java Docs\n\n\nDownload\n\n\nStable releases of the Java API are available from \nMaven Central\n\nOr, you can check out the developer version from \nGitHub\n\n\nInclude the jar file in your projects as usual, or \ninstall via Maven\n.\n\n\nQuick Start\n\n\n\n\nCreate an \nOpenmlConnector\n instance with your authentication details. This will create a client with all OpenML functionalities.\n\n\nOpenmlConnector client = new OpenmlConnector(\"api_key\")\n\n\n\n\n\n\n\n\nAll functions are described in the \nJava Docs\n.\n\n\nDownloading\n\n\nTo download data, flows, tasks, runs, etc. you need the unique id of that resource. The id is shown on each item's webpage and in the corresponding url. For instance, let's download \nData set 1\n. The following returns a DataSetDescription object that contains all information about that data set.\n\n\n\n\n    DataSetDescription data = client.dataGet(1);\n\n\n\n\n\nYou can also \nsearch\n for the items you need online, and click the icon to get all id's that match a search.\n\n\nUploading\n\n\nTo upload data, flows, runs, etc. you need to provide a description of the object. We provide wrapper classes to provide this information, e.g. \nDataSetDescription\n, as well as to capture the server response, e.g. \nUploadDataSet\n, which always includes the generated id for reference:\n\n\n\n\n    DataSetDescription description = new DataSetDescription( \"iris\", \"The famous iris dataset\", \"arff\", \"class\");\n    UploadDataSet result = client.dataUpload( description, datasetFile );\n    int data_id = result.getId();\n\n\n\n\n\nMore details are given in the corresponding functions below. Also see the \nJava Docs\n for all possible inputs and return values.\n\n\nData download\n\n\ndataGet(int data_id)\n\n\nRetrieves the description of a specified data set.\n\n\n\n\n    DataSetDescription data = client.dataGet(1);\n    String name = data.getName();\n    String version = data.getVersion();\n    String description = data.getDescription();\n    String url = data.getUrl();\n\n\n\n\n\ndataFeatures(int data_id)\n\n\nRetrieves the description of the features of a specified data set.\n\n\n\n\n    DataFeature reponse = client.dataFeatures(1);\n    DataFeature.Feature[] features = reponse.getFeatures();\n    String name = features[0].getName();\n    String type = features[0].getDataType();\n    boolean isTarget = features[0].getIs_target();\n\n\n\n\n\ndataQuality(int data_id)\n\n\nRetrieves the description of the qualities (meta-features) of a specified data set.\n\n\n\n\n    DataQuality response = client.dataQuality(1);\n    DataQuality.Quality[] qualities = reponse.getQualities();\n    String name = qualities[0].getName();\n    String value = qualities[0].getValue();\n\n\n\n\n\ndataQuality(int data_id, int start, int end, int interval_size)\n\n\nFor data streams. Retrieves the description of the qualities (meta-features) of a specified portion of a data stream.\n\n\n\n\n    DataQuality qualities = client.dataQuality(1,0,10000,null);\n\n\n\n\n\ndataQualityList()\n\n\nRetrieves a list of all data qualities known to OpenML.\n\n\n\n\n    DataQualityList response = client.dataQualityList();\n    String[] qualities = response.getQualities();\n\n\n\n\n\nData upload\n\n\ndataUpload(DataSetDescription description, File dataset)\n\n\nUploads a data set file to OpenML given a description. Throws an exception if the upload failed, see \nopenml.data.upload\n for error codes.\n\n\n\n\n    DataSetDescription dataset = new DataSetDescription( \"iris\", \"The iris dataset\", \"arff\", \"class\");\n    UploadDataSet data = client.dataUpload( dataset, new File(\"data/path\"));\n    int data_id = result.getId();\n\n\n\n\n\ndataUpload(DataSetDescription description)\n\n\nRegisters an existing dataset (hosted elsewhere). The description needs to include the url of the data set. Throws an exception if the upload failed, see \nopenml.data.upload\n for error codes.\n\n\n\n\n    DataSetDescription description = new DataSetDescription( \"iris\", \"The iris dataset\", \"arff\", \"class\");\n    description.setUrl(\"http://datarepository.org/mydataset\");\n    UploadDataSet data = client.dataUpload( description );\n    int data_id = result.getId();\n\n\n\n\n\nFlow download\n\n\nflowGet(int flow_id)\n\n\nRetrieves the description of the flow/implementation with the given id.\n\n\n\n\n    Implementation flow = client.flowGet(100);\n    String name = flow.getName();\n    String version = flow.getVersion();\n    String description = flow.getDescription();\n    String binary_url = flow.getBinary_url();\n    String source_url = flow.getSource_url();\n    Parameter[] parameters = flow.getParameter();\n\n\n\n\n\nFlow management\n\n\nflowOwned()\n\n\nRetrieves an array of id's of all flows/implementations owned by you.\n\n\n\n\n    ImplementationOwned response = client.flowOwned();\n    Integer[] ids = response.getIds();\n\n\n\n\n\nflowExists(String name, String version)\n\n\nChecks whether an implementation with the given name and version is already registered on OpenML.\n\n\n\n\n    ImplementationExists check = client.flowExists(\"weka.j48\", \"3.7.12\");\n    boolean exists = check.exists();\n    int flow_id = check.getId();\n\n\n\n\n\nflowDelete(int id)\n\n\nRemoves the flow with the given id (if you are its owner).\n\n\n\n\n    ImplementationDelete response = client.openmlImplementationDelete(100);\n\n\n\n\n\nFlow upload\n\n\nflowUpload(Implementation description, File binary, File source)\n\n\nUploads implementation files (binary and/or source) to OpenML given a description.\n\n\n\n\n    Implementation flow = new Implementation(\"weka.J48\", \"3.7.12\", \"description\", \"Java\", \"WEKA 3.7.12\")\n    UploadImplementation response = client.flowUpload( flow, new File(\"code.jar\"), new File(\"source.zip\"));\n    int flow_id = response.getId();\n\n\n\n\n\nTask download\n\n\ntaskGet(int task_id)\n\n\nRetrieves the description of the task with the given id.\n\n\n\n\n    Task task = client.taskGet(1);\n    String task_type = task.getTask_type();\n    Input[] inputs = task.getInputs();\n    Output[] outputs = task.getOutputs();\n\n\n\n\n\ntaskEvaluations(int task_id)\n\n\nRetrieves all evaluations for the task with the given id.\n\n\n\n\n    TaskEvaluations response = client.taskEvaluations(1);\n    Evaluation[] evaluations = response.getEvaluation();\n\n\n\n\n\ntaskEvaluations(int task_id, int start, int end, int interval_size)\n\n\nFor data streams. Retrieves all evaluations for the task over the specified window of the stream.\n\n\n\n\n    TaskEvaluations response = client.taskEvaluations(1);\n    Evaluation[] evaluations = response.getEvaluation();\n\n\n\n\n\nRun download\n\n\nrunGet(int run_id)\n\n\nRetrieves the description of the run with the given id.\n\n\n\n\n    Run run = client.runGet(1);\n    int task_id = run.getTask_id();\n    int flow_id = run.getImplementation_id();\n    Parameter_setting[] settings = run.getParameter_settings()\n    EvaluationScore[] scores = run.getOutputEvaluation();\n\n\n\n\n\nRun management\n\n\nrunDelete(int run_id)\n\n\nDeletes the run with the given id (if you are its owner).\n\n\n\n\n    RunDelete response = client.runDelete(1);\n\n\n\n\n\nRun upload\n\n\nrunUpload(Run description, Map<String,File> output_files)\n\n\nUploads a run to OpenML, including a description and a set of output files depending on the task type.\n\n\n\n\n    Run.Parameter_setting[] parameter_settings = new Run.Parameter_setting[1];\n    parameter_settings[0] = Run.Parameter_setting(null, \"M\", \"2\");\n    Run run = new Run(\"1\", null, \"100\", \"setup_string\", parameter_settings);\n    Map outputs = new HashMap\n();\n    outputs.add(\"predictions\",new File(\"predictions.arff\"));\n    UploadRun response = client.runUpload( run, outputs);\n    int run_id = response.getRun_id();",
            "title": "Java API"
        },
        {
            "location": "/Java-API/#java-docs",
            "text": "Read the full Java Docs",
            "title": "Java Docs"
        },
        {
            "location": "/Java-API/#download",
            "text": "Stable releases of the Java API are available from  Maven Central \nOr, you can check out the developer version from  GitHub  Include the jar file in your projects as usual, or  install via Maven .",
            "title": "Download"
        },
        {
            "location": "/Java-API/#quick-start",
            "text": "Create an  OpenmlConnector  instance with your authentication details. This will create a client with all OpenML functionalities.  OpenmlConnector client = new OpenmlConnector(\"api_key\")     All functions are described in the  Java Docs .",
            "title": "Quick Start"
        },
        {
            "location": "/Java-API/#downloading",
            "text": "To download data, flows, tasks, runs, etc. you need the unique id of that resource. The id is shown on each item's webpage and in the corresponding url. For instance, let's download  Data set 1 . The following returns a DataSetDescription object that contains all information about that data set.  \n\n    DataSetDescription data = client.dataGet(1);  You can also  search  for the items you need online, and click the icon to get all id's that match a search.",
            "title": "Downloading"
        },
        {
            "location": "/Java-API/#uploading",
            "text": "To upload data, flows, runs, etc. you need to provide a description of the object. We provide wrapper classes to provide this information, e.g.  DataSetDescription , as well as to capture the server response, e.g.  UploadDataSet , which always includes the generated id for reference:  \n\n    DataSetDescription description = new DataSetDescription( \"iris\", \"The famous iris dataset\", \"arff\", \"class\");\n    UploadDataSet result = client.dataUpload( description, datasetFile );\n    int data_id = result.getId();  More details are given in the corresponding functions below. Also see the  Java Docs  for all possible inputs and return values.",
            "title": "Uploading"
        },
        {
            "location": "/Java-API/#data-download",
            "text": "",
            "title": "Data download"
        },
        {
            "location": "/Java-API/#datagetint-data_id",
            "text": "Retrieves the description of a specified data set.  \n\n    DataSetDescription data = client.dataGet(1);\n    String name = data.getName();\n    String version = data.getVersion();\n    String description = data.getDescription();\n    String url = data.getUrl();",
            "title": "dataGet(int data_id)"
        },
        {
            "location": "/Java-API/#datafeaturesint-data_id",
            "text": "Retrieves the description of the features of a specified data set.  \n\n    DataFeature reponse = client.dataFeatures(1);\n    DataFeature.Feature[] features = reponse.getFeatures();\n    String name = features[0].getName();\n    String type = features[0].getDataType();\n    boolean isTarget = features[0].getIs_target();",
            "title": "dataFeatures(int data_id)"
        },
        {
            "location": "/Java-API/#dataqualityint-data_id",
            "text": "Retrieves the description of the qualities (meta-features) of a specified data set.  \n\n    DataQuality response = client.dataQuality(1);\n    DataQuality.Quality[] qualities = reponse.getQualities();\n    String name = qualities[0].getName();\n    String value = qualities[0].getValue();",
            "title": "dataQuality(int data_id)"
        },
        {
            "location": "/Java-API/#dataqualityint-data_id-int-start-int-end-int-interval_size",
            "text": "For data streams. Retrieves the description of the qualities (meta-features) of a specified portion of a data stream.  \n\n    DataQuality qualities = client.dataQuality(1,0,10000,null);",
            "title": "dataQuality(int data_id, int start, int end, int interval_size)"
        },
        {
            "location": "/Java-API/#dataqualitylist",
            "text": "Retrieves a list of all data qualities known to OpenML.  \n\n    DataQualityList response = client.dataQualityList();\n    String[] qualities = response.getQualities();",
            "title": "dataQualityList()"
        },
        {
            "location": "/Java-API/#data-upload",
            "text": "",
            "title": "Data upload"
        },
        {
            "location": "/Java-API/#datauploaddatasetdescription-description-file-dataset",
            "text": "Uploads a data set file to OpenML given a description. Throws an exception if the upload failed, see  openml.data.upload  for error codes.  \n\n    DataSetDescription dataset = new DataSetDescription( \"iris\", \"The iris dataset\", \"arff\", \"class\");\n    UploadDataSet data = client.dataUpload( dataset, new File(\"data/path\"));\n    int data_id = result.getId();",
            "title": "dataUpload(DataSetDescription description, File dataset)"
        },
        {
            "location": "/Java-API/#datauploaddatasetdescription-description",
            "text": "Registers an existing dataset (hosted elsewhere). The description needs to include the url of the data set. Throws an exception if the upload failed, see  openml.data.upload  for error codes.  \n\n    DataSetDescription description = new DataSetDescription( \"iris\", \"The iris dataset\", \"arff\", \"class\");\n    description.setUrl(\"http://datarepository.org/mydataset\");\n    UploadDataSet data = client.dataUpload( description );\n    int data_id = result.getId();",
            "title": "dataUpload(DataSetDescription description)"
        },
        {
            "location": "/Java-API/#flow-download",
            "text": "",
            "title": "Flow download"
        },
        {
            "location": "/Java-API/#flowgetint-flow_id",
            "text": "Retrieves the description of the flow/implementation with the given id.  \n\n    Implementation flow = client.flowGet(100);\n    String name = flow.getName();\n    String version = flow.getVersion();\n    String description = flow.getDescription();\n    String binary_url = flow.getBinary_url();\n    String source_url = flow.getSource_url();\n    Parameter[] parameters = flow.getParameter();",
            "title": "flowGet(int flow_id)"
        },
        {
            "location": "/Java-API/#flow-management",
            "text": "",
            "title": "Flow management"
        },
        {
            "location": "/Java-API/#flowowned",
            "text": "Retrieves an array of id's of all flows/implementations owned by you.  \n\n    ImplementationOwned response = client.flowOwned();\n    Integer[] ids = response.getIds();",
            "title": "flowOwned()"
        },
        {
            "location": "/Java-API/#flowexistsstring-name-string-version",
            "text": "Checks whether an implementation with the given name and version is already registered on OpenML.  \n\n    ImplementationExists check = client.flowExists(\"weka.j48\", \"3.7.12\");\n    boolean exists = check.exists();\n    int flow_id = check.getId();",
            "title": "flowExists(String name, String version)"
        },
        {
            "location": "/Java-API/#flowdeleteint-id",
            "text": "Removes the flow with the given id (if you are its owner).  \n\n    ImplementationDelete response = client.openmlImplementationDelete(100);",
            "title": "flowDelete(int id)"
        },
        {
            "location": "/Java-API/#flow-upload",
            "text": "",
            "title": "Flow upload"
        },
        {
            "location": "/Java-API/#flowuploadimplementation-description-file-binary-file-source",
            "text": "Uploads implementation files (binary and/or source) to OpenML given a description.  \n\n    Implementation flow = new Implementation(\"weka.J48\", \"3.7.12\", \"description\", \"Java\", \"WEKA 3.7.12\")\n    UploadImplementation response = client.flowUpload( flow, new File(\"code.jar\"), new File(\"source.zip\"));\n    int flow_id = response.getId();",
            "title": "flowUpload(Implementation description, File binary, File source)"
        },
        {
            "location": "/Java-API/#task-download",
            "text": "",
            "title": "Task download"
        },
        {
            "location": "/Java-API/#taskgetint-task_id",
            "text": "Retrieves the description of the task with the given id.  \n\n    Task task = client.taskGet(1);\n    String task_type = task.getTask_type();\n    Input[] inputs = task.getInputs();\n    Output[] outputs = task.getOutputs();",
            "title": "taskGet(int task_id)"
        },
        {
            "location": "/Java-API/#taskevaluationsint-task_id",
            "text": "Retrieves all evaluations for the task with the given id.  \n\n    TaskEvaluations response = client.taskEvaluations(1);\n    Evaluation[] evaluations = response.getEvaluation();",
            "title": "taskEvaluations(int task_id)"
        },
        {
            "location": "/Java-API/#taskevaluationsint-task_id-int-start-int-end-int-interval_size",
            "text": "For data streams. Retrieves all evaluations for the task over the specified window of the stream.  \n\n    TaskEvaluations response = client.taskEvaluations(1);\n    Evaluation[] evaluations = response.getEvaluation();",
            "title": "taskEvaluations(int task_id, int start, int end, int interval_size)"
        },
        {
            "location": "/Java-API/#run-download",
            "text": "",
            "title": "Run download"
        },
        {
            "location": "/Java-API/#rungetint-run_id",
            "text": "Retrieves the description of the run with the given id.  \n\n    Run run = client.runGet(1);\n    int task_id = run.getTask_id();\n    int flow_id = run.getImplementation_id();\n    Parameter_setting[] settings = run.getParameter_settings()\n    EvaluationScore[] scores = run.getOutputEvaluation();",
            "title": "runGet(int run_id)"
        },
        {
            "location": "/Java-API/#run-management",
            "text": "",
            "title": "Run management"
        },
        {
            "location": "/Java-API/#rundeleteint-run_id",
            "text": "Deletes the run with the given id (if you are its owner).  \n\n    RunDelete response = client.runDelete(1);",
            "title": "runDelete(int run_id)"
        },
        {
            "location": "/Java-API/#run-upload",
            "text": "",
            "title": "Run upload"
        },
        {
            "location": "/Java-API/#runuploadrun-description-mapstringfile-output_files",
            "text": "Uploads a run to OpenML, including a description and a set of output files depending on the task type.  \n\n    Run.Parameter_setting[] parameter_settings = new Run.Parameter_setting[1];\n    parameter_settings[0] = Run.Parameter_setting(null, \"M\", \"2\");\n    Run run = new Run(\"1\", null, \"100\", \"setup_string\", parameter_settings);\n    Map outputs = new HashMap ();\n    outputs.add(\"predictions\",new File(\"predictions.arff\"));\n    UploadRun response = client.runUpload( run, outputs);\n    int run_id = response.getRun_id();",
            "title": "runUpload(Run description, Map&lt;String,File&gt; output_files)"
        },
        {
            "location": "/.Net-API/",
            "text": "The .Net API allows you connect to OpenML from .Net applications.\n\n\nDownload\n\n\nStable releases of the .Net API are available via \nNuGet\n. Use the NuGet package explorer in the Visual Studia, write \u201cInstall-Package openMl\u201d to the NuGet package manager console or download the whole package from the NuGet website and add it into your project. Or, you can check out the developer version from \nGitHub\n.\n\n\nQuick Start\n\n\nCreate an \nOpenmlConnector\n instance with your api key. You can find this key in your account settings. This will create a client with OpenML functionalities, The functionalities mirror the OpenMlApi and not all of them are (yet) implemented. If you need some feature, don\u2019t hesitate contact us via our Git page.\n\n\n\n\n\n    `var connector = new OpenMlConnector(\"YOURAPIKEY\");`\n\n\n\n\n\n\nAll OpenMlConnector methods are documented via the usual .Net comments.\n\n\nGet dataset description\n\n\n\n\n\n    `var datasetDescription = connector.GetDatasetDescription(1);`\n\n\n\n\n\n\nList datasets\n\n\n\n\n\n    `var data = connector.ListDatasets();`\n\n\n\n\n\n\nGet run\n\n\n\n\n\n    `var run = connector.GetRun(1);`\n\n\n\n\n\n\nList task types\n\n\n\n\n\n    `var taskTypes = connector.ListTaskTypes();`\n\n\n\n\n\n\nGet task type\n\n\n\n\n\n    `var taskType = connector.GetTaskType(1);`\n\n\n\n\n\n\nList evaluation measures\n\n\n\n\n\n    `var measures = connector.ListEvaluationMeasures();`\n\n\n\n\n\n\nList estimation procedures\n\n\n\n\n\n    `var estimationProcs = connector.ListEstimationProcedures();`\n\n\n\n\n\n\nGet estimation procedure\n\n\n\n\n\n    `var estimationProc = connector.GetEstimationProcedure(1);`\n\n\n\n\n\n\nList data qualities\n\n\n\n\n\n    `var dataQualities = connector.ListDataQualities();`",
            "title": ".Net API"
        },
        {
            "location": "/.Net-API/#download",
            "text": "Stable releases of the .Net API are available via  NuGet . Use the NuGet package explorer in the Visual Studia, write \u201cInstall-Package openMl\u201d to the NuGet package manager console or download the whole package from the NuGet website and add it into your project. Or, you can check out the developer version from  GitHub .",
            "title": "Download"
        },
        {
            "location": "/.Net-API/#quick-start",
            "text": "Create an  OpenmlConnector  instance with your api key. You can find this key in your account settings. This will create a client with OpenML functionalities, The functionalities mirror the OpenMlApi and not all of them are (yet) implemented. If you need some feature, don\u2019t hesitate contact us via our Git page.       `var connector = new OpenMlConnector(\"YOURAPIKEY\");`   All OpenMlConnector methods are documented via the usual .Net comments.",
            "title": "Quick Start"
        },
        {
            "location": "/.Net-API/#get-dataset-description",
            "text": "`var datasetDescription = connector.GetDatasetDescription(1);`",
            "title": "Get dataset description"
        },
        {
            "location": "/.Net-API/#list-datasets",
            "text": "`var data = connector.ListDatasets();`",
            "title": "List datasets"
        },
        {
            "location": "/.Net-API/#get-run",
            "text": "`var run = connector.GetRun(1);`",
            "title": "Get run"
        },
        {
            "location": "/.Net-API/#list-task-types",
            "text": "`var taskTypes = connector.ListTaskTypes();`",
            "title": "List task types"
        },
        {
            "location": "/.Net-API/#get-task-type",
            "text": "`var taskType = connector.GetTaskType(1);`",
            "title": "Get task type"
        },
        {
            "location": "/.Net-API/#list-evaluation-measures",
            "text": "`var measures = connector.ListEvaluationMeasures();`",
            "title": "List evaluation measures"
        },
        {
            "location": "/.Net-API/#list-estimation-procedures",
            "text": "`var estimationProcs = connector.ListEstimationProcedures();`",
            "title": "List estimation procedures"
        },
        {
            "location": "/.Net-API/#get-estimation-procedure",
            "text": "`var estimationProc = connector.GetEstimationProcedure(1);`",
            "title": "Get estimation procedure"
        },
        {
            "location": "/.Net-API/#list-data-qualities",
            "text": "`var dataQualities = connector.ListDataQualities();`",
            "title": "List data qualities"
        },
        {
            "location": "/Data-Formats/",
            "text": "To guarantee interoperability, we focus on a limited set of data formats. We aim to support all sorts of data, but for the moment we only fully support tabular data in the ARFF format. Please get in touch if you like to help us add support for new data formats.\n\n\nFormat definitions\n\n\nARFF definition\n. Also check that attribute definitions do not mix spaces and tabs, and do not include end-of-line comments.",
            "title": "Data Formats"
        },
        {
            "location": "/Data-Formats/#format-definitions",
            "text": "ARFF definition . Also check that attribute definitions do not mix spaces and tabs, and do not include end-of-line comments.",
            "title": "Format definitions"
        },
        {
            "location": "/Client-API-Standards/",
            "text": "This page defines a minimal standard to adhere in programming APIs.\n\n\nConfiguration file\n\n\nThe configuration file resides in a directory \n.openml\n in the home directory of the user and is called config. It consists of \nkey = value\n pairs which are seperated by newlines. The following keys are defined:\n\n\n\n\napikey:\n\n\nrequired to access the server\n\n\n\n\n\n\nserver:\n\n\ndefault: \nhttp://www.openml.org\n\n\n\n\n\n\nverbosity:\n\n\n0: normal output\n\n\n1: info output\n\n\n2: debug output\n\n\n\n\n\n\ncachedir:\n\n\nif not given, will default to \nfile.path(tempdir(), \"cache\")\n.\n\n\n\n\n\n\narff.reader:\n\n\nRWeka\n: This is the standard Java parser used in Weka.\n\n\nfarff\n: The \nfarff package\n lives below the mlr-org and is a newer, faster parser without Java.\n\n\n\n\n\n\n\n\nCaching\n\n\nCache invalidation\n\n\nAll parts of the entities which affect experiments are immutable. The entities dataset and task have a flag \nstatus\n which tells the user whether they can be used safely.\n\n\nFile structure\n\n\nCaching should be implemented for\n\n\n\n\ndatasets\n\n\ntasks\n\n\nsplits\n\n\npredictions\n\n\n\n\nand further entities might follow in the future. The cache directory \n$cache\n should be specified by the user when invoking the API. The structure in the cache directory should be as following:\n\n\n\n\nOne directory for the following entities:\n\n\n$cache/datasets\n\n\n$cache/tasks\n\n\n$cache/runs\n\n\n\n\n\n\nFor every dataset there is an extra directory for which the name is the dataset ID, e.g. \n$cache/datasets/2\n for the dataset anneal.ORIG\n\n\nThe dataset should be called \ndataset.arff\n\n\nEvery other file should be named by the API call which was used to obtain it. The XML returned by invoking \nopenml.data.qualities\n should therefore be called qualities.xml.\n\n\n\n\n\n\nFor every task there is an extra directory for which the name is the task ID, e.g. \n$cache/tasks/1\n\n\nThe task file should be called \ntask.xml\n.\n\n\nThe splits accompanying a task are stored in a file \ndatasplits.arff\n.\n\n\n\n\n\n\nFor every run there is an extra directory for which the name is the run ID, e.g. \n$cache/run/1\n\n\nThe predictions should be called \npredictions.arff\n.",
            "title": "Client API Standards"
        },
        {
            "location": "/Client-API-Standards/#configuration-file",
            "text": "The configuration file resides in a directory  .openml  in the home directory of the user and is called config. It consists of  key = value  pairs which are seperated by newlines. The following keys are defined:   apikey:  required to access the server    server:  default:  http://www.openml.org    verbosity:  0: normal output  1: info output  2: debug output    cachedir:  if not given, will default to  file.path(tempdir(), \"cache\") .    arff.reader:  RWeka : This is the standard Java parser used in Weka.  farff : The  farff package  lives below the mlr-org and is a newer, faster parser without Java.",
            "title": "Configuration file"
        },
        {
            "location": "/Client-API-Standards/#caching",
            "text": "",
            "title": "Caching"
        },
        {
            "location": "/Client-API-Standards/#cache-invalidation",
            "text": "All parts of the entities which affect experiments are immutable. The entities dataset and task have a flag  status  which tells the user whether they can be used safely.",
            "title": "Cache invalidation"
        },
        {
            "location": "/Client-API-Standards/#file-structure",
            "text": "Caching should be implemented for   datasets  tasks  splits  predictions   and further entities might follow in the future. The cache directory  $cache  should be specified by the user when invoking the API. The structure in the cache directory should be as following:   One directory for the following entities:  $cache/datasets  $cache/tasks  $cache/runs    For every dataset there is an extra directory for which the name is the dataset ID, e.g.  $cache/datasets/2  for the dataset anneal.ORIG  The dataset should be called  dataset.arff  Every other file should be named by the API call which was used to obtain it. The XML returned by invoking  openml.data.qualities  should therefore be called qualities.xml.    For every task there is an extra directory for which the name is the task ID, e.g.  $cache/tasks/1  The task file should be called  task.xml .  The splits accompanying a task are stored in a file  datasplits.arff .    For every run there is an extra directory for which the name is the run ID, e.g.  $cache/run/1  The predictions should be called  predictions.arff .",
            "title": "File structure"
        },
        {
            "location": "/API-Authentication-and-User-types/",
            "text": "Authentication towards the server goes by means of a so-called api_key (a hexa-decimal string which uniquely identifies a user). Upon interaction with the server, the client passes this api_key to the server, and the server checks the rights of the user. Currently this goes by means of a get or post variable, but in the future we might want to use a header field (because of security). It is recommended to refresh your api_key every month. \n\n\nIMPORTANT: Most authentication operations are handled by the ION_Auth library (\nhttp://benedmunds.com/ion_auth/\n). DO NOT alter information directly in the user table, always use the ION_Auth API. \n\n\nA user can be part of one or many groups. The following user groups exists:\n1. Admin Group: With great power comes great responsibility. Admin users can overrule all security checks on the server, i.e., delete a dataset or run that is not theirs, or even delete a flow that contains runs.\n2. Normal Group: Level that is required for read/write interaction with the server. Almost all users are part of this group. \n3. Read-only Group: Level that can be used for read interaction with the server. If a user is part of this group, but not part of 'Normal Group', he is allowed to download content, but can not upload or delete content. \n4. Backend Group: (Work in Progress) Level that has more privileges than 'Normal Group'. Can submit Data Qualities and Evaluations. \n\n\nThe ION_Auth functions in_group(), add_to_group(), remove_from_group() and get_users_groups() are key towards interaction with these tables. \n\n\nFrontend todo: show on user page which groups he belongs to.",
            "title": "User Authentication"
        },
        {
            "location": "/Data-collections/",
            "text": "This website is supposed to gather and explain curated lists of OpenML datasets.\n\n\nEfficient and Robust Automated Machine Learning - Feurer et al. - NIPS 2015\n\n\nContact: \n@mfeurer\n\n\nUsed in: \nEfficient and Robust Automated Machine Learning\n\n\nDatasets:\n\n\n1000,1002,1018,1019,1020,1021,1036,1040,1041,1049,1050,1053,1056,1067,1068,1069,1111,1112,1114,1116,1119,1120,1128,1130,1134,1138,1139,1142,1146,1161,1166,12,14,16,179,180,181,182,184,185,18,21,22,23,24,26,273,28,293,300,30,31,32,351,354,357,36,389,38,390,391,392,393,395,396,398,399,3,401,44,46,554,57,60,679,6,715,718,720,722,723,727,728,734,735,737,740,741,743,751,752,761,772,797,799,803,806,807,813,816,819,821,822,823,833,837,843,845,846,847,849,866,871,881,897,901,903,904,910,912,913,914,917,923,930,934,953,958,959,962,966,971,976,977,978,979,980,991,993,995\n\n\n\n\n\n\n\n\n\n\n\ndid\n\n\nname\n\n\nn\n\n\np\n\n\np.num\n\n\np.syms\n\n\np.bin\n\n\nn.class\n\n\nminclass\n\n\nmaxclass\n\n\nn.miss\n\n\n\n\n\n\n\n\n\n\n29\n\n\n31\n\n\ncredit-g\n\n\n1000\n\n\n21\n\n\n7\n\n\n13\n\n\n2\n\n\n2\n\n\n300\n\n\n700\n\n\n0\n\n\n\n\n\n\n570\n\n\n715\n\n\nfri_c3_1000_25\n\n\n1000\n\n\n26\n\n\n25\n\n\n0\n\n\n0\n\n\n2\n\n\n443\n\n\n557\n\n\n0\n\n\n\n\n\n\n573\n\n\n718\n\n\nfri_c4_1000_100\n\n\n1000\n\n\n101\n\n\n100\n\n\n0\n\n\n0\n\n\n2\n\n\n436\n\n\n564\n\n\n0\n\n\n\n\n\n\n578\n\n\n723\n\n\nfri_c4_1000_25\n\n\n1000\n\n\n26\n\n\n25\n\n\n0\n\n\n0\n\n\n2\n\n\n453\n\n\n547\n\n\n0\n\n\n\n\n\n\n595\n\n\n740\n\n\nfri_c3_1000_10\n\n\n1000\n\n\n11\n\n\n10\n\n\n0\n\n\n0\n\n\n2\n\n\n440\n\n\n560\n\n\n0\n\n\n\n\n\n\n598\n\n\n743\n\n\nfri_c1_1000_5\n\n\n1000\n\n\n6\n\n\n5\n\n\n0\n\n\n0\n\n\n2\n\n\n457\n\n\n543\n\n\n0\n\n\n\n\n\n\n606\n\n\n751\n\n\nfri_c4_1000_10\n\n\n1000\n\n\n11\n\n\n10\n\n\n0\n\n\n0\n\n\n2\n\n\n440\n\n\n560\n\n\n0\n\n\n\n\n\n\n651\n\n\n797\n\n\nfri_c4_1000_50\n\n\n1000\n\n\n51\n\n\n50\n\n\n0\n\n\n0\n\n\n2\n\n\n440\n\n\n560\n\n\n0\n\n\n\n\n\n\n653\n\n\n799\n\n\nfri_c0_1000_5\n\n\n1000\n\n\n6\n\n\n5\n\n\n0\n\n\n0\n\n\n2\n\n\n497\n\n\n503\n\n\n0\n\n\n\n\n\n\n660\n\n\n806\n\n\nfri_c3_1000_50\n\n\n1000\n\n\n51\n\n\n50\n\n\n0\n\n\n0\n\n\n2\n\n\n445\n\n\n555\n\n\n0\n\n\n\n\n\n\n667\n\n\n813\n\n\nfri_c3_1000_5\n\n\n1000\n\n\n6\n\n\n5\n\n\n0\n\n\n0\n\n\n2\n\n\n437\n\n\n563\n\n\n0\n\n\n\n\n\n\n691\n\n\n837\n\n\nfri_c1_1000_50\n\n\n1000\n\n\n51\n\n\n50\n\n\n0\n\n\n0\n\n\n2\n\n\n453\n\n\n547\n\n\n0\n\n\n\n\n\n\n699\n\n\n845\n\n\nfri_c0_1000_10\n\n\n1000\n\n\n11\n\n\n10\n\n\n0\n\n\n0\n\n\n2\n\n\n491\n\n\n509\n\n\n0\n\n\n\n\n\n\n703\n\n\n849\n\n\nfri_c0_1000_25\n\n\n1000\n\n\n26\n\n\n25\n\n\n0\n\n\n0\n\n\n2\n\n\n497\n\n\n503\n\n\n0\n\n\n\n\n\n\n719\n\n\n866\n\n\nfri_c2_1000_50\n\n\n1000\n\n\n51\n\n\n50\n\n\n0\n\n\n0\n\n\n2\n\n\n418\n\n\n582\n\n\n0\n\n\n\n\n\n\n755\n\n\n903\n\n\nfri_c2_1000_25\n\n\n1000\n\n\n26\n\n\n25\n\n\n0\n\n\n0\n\n\n2\n\n\n437\n\n\n563\n\n\n0\n\n\n\n\n\n\n756\n\n\n904\n\n\nfri_c0_1000_50\n\n\n1000\n\n\n51\n\n\n50\n\n\n0\n\n\n0\n\n\n2\n\n\n490\n\n\n510\n\n\n0\n\n\n\n\n\n\n762\n\n\n910\n\n\nfri_c1_1000_10\n\n\n1000\n\n\n11\n\n\n10\n\n\n0\n\n\n0\n\n\n2\n\n\n436\n\n\n564\n\n\n0\n\n\n\n\n\n\n764\n\n\n912\n\n\nfri_c2_1000_5\n\n\n1000\n\n\n6\n\n\n5\n\n\n0\n\n\n0\n\n\n2\n\n\n416\n\n\n584\n\n\n0\n\n\n\n\n\n\n765\n\n\n913\n\n\nfri_c2_1000_10\n\n\n1000\n\n\n11\n\n\n10\n\n\n0\n\n\n0\n\n\n2\n\n\n420\n\n\n580\n\n\n0\n\n\n\n\n\n\n769\n\n\n917\n\n\nfri_c1_1000_25\n\n\n1000\n\n\n26\n\n\n25\n\n\n0\n\n\n0\n\n\n2\n\n\n454\n\n\n546\n\n\n0\n\n\n\n\n\n\n262\n\n\n392\n\n\noh0.wc\n\n\n1003\n\n\n3183\n\n\n3182\n\n\n0\n\n\n0\n\n\n10\n\n\n51\n\n\n194\n\n\n0\n\n\n\n\n\n\n535\n\n\n679\n\n\nrmftsa_sleepdata\n\n\n1024\n\n\n3\n\n\n2\n\n\n1\n\n\n0\n\n\n4\n\n\n94\n\n\n404\n\n\n0\n\n\n\n\n\n\n596\n\n\n741\n\n\nrmftsa_sleepdata\n\n\n1024\n\n\n3\n\n\n1\n\n\n1\n\n\n0\n\n\n2\n\n\n509\n\n\n515\n\n\n0\n\n\n\n\n\n\n271\n\n\n401\n\n\noh10.wc\n\n\n1050\n\n\n3239\n\n\n3238\n\n\n0\n\n\n0\n\n\n10\n\n\n52\n\n\n165\n\n\n0\n\n\n\n\n\n\n914\n\n\n1068\n\n\npc1\n\n\n1109\n\n\n22\n\n\n21\n\n\n0\n\n\n0\n\n\n2\n\n\n77\n\n\n1032\n\n\n0\n\n\n\n\n\n\n786\n\n\n934\n\n\nsocmob\n\n\n1156\n\n\n6\n\n\n1\n\n\n4\n\n\n2\n\n\n2\n\n\n256\n\n\n900\n\n\n0\n\n\n\n\n\n\n749\n\n\n897\n\n\ncolleges_aaup\n\n\n1161\n\n\n17\n\n\n13\n\n\n3\n\n\n0\n\n\n2\n\n\n348\n\n\n813\n\n\n87\n\n\n\n\n\n\n782\n\n\n930\n\n\ncolleges_usnews\n\n\n1302\n\n\n35\n\n\n32\n\n\n2\n\n\n0\n\n\n2\n\n\n614\n\n\n688\n\n\n1144\n\n\n\n\n\n\n123\n\n\n185\n\n\nbaseball\n\n\n1340\n\n\n18\n\n\n15\n\n\n2\n\n\n0\n\n\n3\n\n\n57\n\n\n1215\n\n\n20\n\n\n\n\n\n\n818\n\n\n966\n\n\nanalcatdata_halloffame\n\n\n1340\n\n\n18\n\n\n15\n\n\n2\n\n\n0\n\n\n2\n\n\n125\n\n\n1215\n\n\n20\n\n\n\n\n\n\n896\n\n\n1049\n\n\npc4\n\n\n1458\n\n\n38\n\n\n37\n\n\n0\n\n\n0\n\n\n2\n\n\n178\n\n\n1280\n\n\n0\n\n\n\n\n\n\n21\n\n\n23\n\n\ncmc\n\n\n1473\n\n\n10\n\n\n2\n\n\n7\n\n\n3\n\n\n3\n\n\n333\n\n\n629\n\n\n0\n\n\n\n\n\n\n119\n\n\n181\n\n\nyeast\n\n\n1484\n\n\n9\n\n\n8\n\n\n0\n\n\n0\n\n\n10\n\n\n5\n\n\n463\n\n\n0\n\n\n\n\n\n\n261\n\n\n391\n\n\nre0.wc\n\n\n1504\n\n\n2887\n\n\n2886\n\n\n0\n\n\n0\n\n\n13\n\n\n11\n\n\n608\n\n\n0\n\n\n\n\n\n\n972\n\n\n1128\n\n\nOVA_Breast\n\n\n1545\n\n\n10937\n\n\n10936\n\n\n1\n\n\n0\n\n\n2\n\n\n344\n\n\n1201\n\n\n0\n\n\n\n\n\n\n974\n\n\n1130\n\n\nOVA_Lung\n\n\n1545\n\n\n10937\n\n\n10936\n\n\n0\n\n\n0\n\n\n2\n\n\n126\n\n\n1419\n\n\n0\n\n\n\n\n\n\n978\n\n\n1134\n\n\nOVA_Kidney\n\n\n1545\n\n\n10937\n\n\n10936\n\n\n0\n\n\n0\n\n\n2\n\n\n260\n\n\n1285\n\n\n0\n\n\n\n\n\n\n982\n\n\n1138\n\n\nOVA_Uterus\n\n\n1545\n\n\n10937\n\n\n10936\n\n\n1\n\n\n0\n\n\n2\n\n\n124\n\n\n1421\n\n\n0\n\n\n\n\n\n\n983\n\n\n1139\n\n\nOVA_Omentum\n\n\n1545\n\n\n10937\n\n\n10936\n\n\n0\n\n\n0\n\n\n2\n\n\n77\n\n\n1468\n\n\n0\n\n\n\n\n\n\n986\n\n\n1142\n\n\nOVA_Endometrium\n\n\n1545\n\n\n10937\n\n\n10936\n\n\n0\n\n\n0\n\n\n2\n\n\n61\n\n\n1484\n\n\n0\n\n\n\n\n\n\n990\n\n\n1146\n\n\nOVA_Prostate\n\n\n1545\n\n\n10937\n\n\n10936\n\n\n0\n\n\n0\n\n\n2\n\n\n69\n\n\n1476\n\n\n0\n\n\n\n\n\n\n1005\n\n\n1161\n\n\nOVA_Colon\n\n\n1545\n\n\n10937\n\n\n10936\n\n\n0\n\n\n0\n\n\n2\n\n\n286\n\n\n1259\n\n\n0\n\n\n\n\n\n\n1010\n\n\n1166\n\n\nOVA_Ovary\n\n\n1545\n\n\n10937\n\n\n10936\n\n\n0\n\n\n0\n\n\n2\n\n\n198\n\n\n1347\n\n\n0\n\n\n\n\n\n\n268\n\n\n398\n\n\nwap.wc\n\n\n1560\n\n\n8461\n\n\n8460\n\n\n0\n\n\n0\n\n\n20\n\n\n5\n\n\n341\n\n\n0\n\n\n\n\n\n\n897\n\n\n1050\n\n\npc3\n\n\n1563\n\n\n38\n\n\n37\n\n\n0\n\n\n0\n\n\n2\n\n\n160\n\n\n1403\n\n\n0\n\n\n\n\n\n\n265\n\n\n395\n\n\nre1.wc\n\n\n1657\n\n\n3759\n\n\n3758\n\n\n1\n\n\n0\n\n\n25\n\n\n10\n\n\n371\n\n\n0\n\n\n\n\n\n\n19\n\n\n21\n\n\ncar\n\n\n1728\n\n\n7\n\n\n0\n\n\n6\n\n\n0\n\n\n4\n\n\n65\n\n\n1210\n\n\n0\n\n\n\n\n\n\n843\n\n\n991\n\n\ncar\n\n\n1728\n\n\n7\n\n\n0\n\n\n6\n\n\n0\n\n\n2\n\n\n518\n\n\n1210\n\n\n0\n\n\n\n\n\n\n12\n\n\n12\n\n\nmfeat-factors\n\n\n2000\n\n\n217\n\n\n216\n\n\n0\n\n\n0\n\n\n10\n\n\n200\n\n\n200\n\n\n0\n\n\n\n\n\n\n14\n\n\n14\n\n\nmfeat-fourier\n\n\n2000\n\n\n77\n\n\n76\n\n\n0\n\n\n0\n\n\n10\n\n\n200\n\n\n200\n\n\n0\n\n\n\n\n\n\n16\n\n\n16\n\n\nmfeat-karhunen\n\n\n2000\n\n\n65\n\n\n64\n\n\n0\n\n\n0\n\n\n10\n\n\n200\n\n\n200\n\n\n0\n\n\n\n\n\n\n17\n\n\n18\n\n\nmfeat-morphological\n\n\n2000\n\n\n7\n\n\n6\n\n\n0\n\n\n0\n\n\n10\n\n\n200\n\n\n200\n\n\n0\n\n\n\n\n\n\n20\n\n\n22\n\n\nmfeat-zernike\n\n\n2000\n\n\n48\n\n\n47\n\n\n0\n\n\n0\n\n\n10\n\n\n200\n\n\n200\n\n\n0\n\n\n\n\n\n\n814\n\n\n962\n\n\nmfeat-morphological\n\n\n2000\n\n\n7\n\n\n6\n\n\n0\n\n\n0\n\n\n2\n\n\n200\n\n\n1800\n\n\n0\n\n\n\n\n\n\n823\n\n\n971\n\n\nmfeat-fourier\n\n\n2000\n\n\n77\n\n\n76\n\n\n0\n\n\n0\n\n\n2\n\n\n200\n\n\n1800\n\n\n0\n\n\n\n\n\n\n830\n\n\n978\n\n\nmfeat-factors\n\n\n2000\n\n\n217\n\n\n216\n\n\n0\n\n\n0\n\n\n2\n\n\n200\n\n\n1800\n\n\n0\n\n\n\n\n\n\n847\n\n\n995\n\n\nmfeat-zernike\n\n\n2000\n\n\n48\n\n\n47\n\n\n0\n\n\n0\n\n\n2\n\n\n200\n\n\n1800\n\n\n0\n\n\n\n\n\n\n872\n\n\n1020\n\n\nmfeat-karhunen\n\n\n2000\n\n\n65\n\n\n64\n\n\n0\n\n\n0\n\n\n2\n\n\n200\n\n\n1800\n\n\n0\n\n\n\n\n\n\n766\n\n\n914\n\n\nballoon\n\n\n2001\n\n\n3\n\n\n2\n\n\n0\n\n\n0\n\n\n2\n\n\n482\n\n\n1519\n\n\n0\n\n\n\n\n\n\n913\n\n\n1067\n\n\nkc1\n\n\n2109\n\n\n22\n\n\n21\n\n\n0\n\n\n0\n\n\n2\n\n\n326\n\n\n1783\n\n\n0\n\n\n\n\n\n\n627\n\n\n772\n\n\nquake\n\n\n2178\n\n\n4\n\n\n3\n\n\n0\n\n\n0\n\n\n2\n\n\n969\n\n\n1209\n\n\n0\n\n\n\n\n\n\n33\n\n\n36\n\n\nsegment\n\n\n2310\n\n\n20\n\n\n19\n\n\n0\n\n\n0\n\n\n7\n\n\n330\n\n\n330\n\n\n0\n\n\n\n\n\n\n810\n\n\n958\n\n\nsegment\n\n\n2310\n\n\n20\n\n\n19\n\n\n0\n\n\n0\n\n\n2\n\n\n330\n\n\n1980\n\n\n0\n\n\n\n\n\n\n259\n\n\n389\n\n\nfbis.wc\n\n\n2463\n\n\n2001\n\n\n2000\n\n\n0\n\n\n0\n\n\n17\n\n\n38\n\n\n506\n\n\n0\n\n\n\n\n\n\n263\n\n\n393\n\n\nla2s.wc\n\n\n3075\n\n\n12433\n\n\n12432\n\n\n1\n\n\n0\n\n\n6\n\n\n248\n\n\n905\n\n\n0\n\n\n\n\n\n\n592\n\n\n737\n\n\nspace_ga\n\n\n3107\n\n\n7\n\n\n6\n\n\n0\n\n\n0\n\n\n2\n\n\n1541\n\n\n1566\n\n\n0\n\n\n\n\n\n\n42\n\n\n46\n\n\nsplice\n\n\n3190\n\n\n62\n\n\n0\n\n\n61\n\n\n0\n\n\n3\n\n\n767\n\n\n1655\n\n\n0\n\n\n\n\n\n\n805\n\n\n953\n\n\nsplice\n\n\n3190\n\n\n62\n\n\n0\n\n\n61\n\n\n0\n\n\n2\n\n\n1535\n\n\n1655\n\n\n0\n\n\n\n\n\n\n3\n\n\n3\n\n\nkr-vs-kp\n\n\n3196\n\n\n37\n\n\n0\n\n\n36\n\n\n34\n\n\n2\n\n\n1527\n\n\n1669\n\n\n0\n\n\n\n\n\n\n266\n\n\n396\n\n\nla1s.wc\n\n\n3204\n\n\n13196\n\n\n13195\n\n\n1\n\n\nNA\n\n\n6\n\n\n273\n\n\n943\n\n\n0\n\n\n\n\n\n\n888\n\n\n1041\n\n\ngina_prior2\n\n\n3468\n\n\n785\n\n\n784\n\n\n0\n\n\n0\n\n\n10\n\n\n315\n\n\n383\n\n\n0\n\n\n\n\n\n\n35\n\n\n38\n\n\nsick\n\n\n3772\n\n\n30\n\n\n7\n\n\n22\n\n\n20\n\n\n2\n\n\n231\n\n\n3541\n\n\n3772\n\n\n\n\n\n\n52\n\n\n57\n\n\nhypothyroid\n\n\n3772\n\n\n30\n\n\n7\n\n\n22\n\n\n20\n\n\n4\n\n\n2\n\n\n3481\n\n\n3772\n\n\n\n\n\n\n852\n\n\n1000\n\n\nhypothyroid\n\n\n3772\n\n\n30\n\n\n7\n\n\n22\n\n\n20\n\n\n2\n\n\n291\n\n\n3481\n\n\n3772\n\n\n\n\n\n\n724\n\n\n871\n\n\npollen\n\n\n3848\n\n\n6\n\n\n5\n\n\n0\n\n\n0\n\n\n2\n\n\n1924\n\n\n1924\n\n\n0\n\n\n\n\n\n\n583\n\n\n728\n\n\nanalcatdata_supreme\n\n\n4052\n\n\n8\n\n\n7\n\n\n0\n\n\n0\n\n\n2\n\n\n971\n\n\n3081\n\n\n0\n\n\n\n\n\n\n575\n\n\n720\n\n\nabalone\n\n\n4177\n\n\n9\n\n\n7\n\n\n1\n\n\n0\n\n\n2\n\n\n2081\n\n\n2096\n\n\n0\n\n\n\n\n\n\n41\n\n\n44\n\n\nspambase\n\n\n4601\n\n\n58\n\n\n57\n\n\n0\n\n\n0\n\n\n2\n\n\n1813\n\n\n2788\n\n\n0\n\n\n\n\n\n\n54\n\n\n60\n\n\nwaveform-5000\n\n\n5000\n\n\n41\n\n\n40\n\n\n0\n\n\n0\n\n\n3\n\n\n1653\n\n\n1692\n\n\n0\n\n\n\n\n\n\n831\n\n\n979\n\n\nwaveform-5000\n\n\n5000\n\n\n41\n\n\n40\n\n\n0\n\n\n0\n\n\n2\n\n\n1692\n\n\n3308\n\n\n0\n\n\n\n\n\n\n28\n\n\n30\n\n\npage-blocks\n\n\n5473\n\n\n11\n\n\n10\n\n\n0\n\n\n0\n\n\n5\n\n\n28\n\n\n4913\n\n\n0\n\n\n\n\n\n\n873\n\n\n1021\n\n\npage-blocks\n\n\n5473\n\n\n11\n\n\n10\n\n\n0\n\n\n0\n\n\n2\n\n\n560\n\n\n4913\n\n\n0\n\n\n\n\n\n\n915\n\n\n1069\n\n\npc2\n\n\n5589\n\n\n37\n\n\n36\n\n\n0\n\n\n0\n\n\n2\n\n\n23\n\n\n5566\n\n\n0\n\n\n\n\n\n\n26\n\n\n28\n\n\noptdigits\n\n\n5620\n\n\n65\n\n\n64\n\n\n0\n\n\n0\n\n\n10\n\n\n554\n\n\n572\n\n\n0\n\n\n\n\n\n\n832\n\n\n980\n\n\noptdigits\n\n\n5620\n\n\n65\n\n\n64\n\n\n0\n\n\n0\n\n\n2\n\n\n572\n\n\n5048\n\n\n0\n\n\n\n\n\n\n120\n\n\n182\n\n\nsatimage\n\n\n6430\n\n\n37\n\n\n36\n\n\n0\n\n\n0\n\n\n6\n\n\n625\n\n\n1531\n\n\n0\n\n\n\n\n\n\n701\n\n\n847\n\n\nwind\n\n\n6574\n\n\n15\n\n\n14\n\n\n0\n\n\n0\n\n\n2\n\n\n3073\n\n\n3501\n\n\n0\n\n\n\n\n\n\n960\n\n\n1116\n\n\nmusk\n\n\n6598\n\n\n170\n\n\n167\n\n\n2\n\n\n0\n\n\n2\n\n\n1017\n\n\n5581\n\n\n0\n\n\n\n\n\n\n845\n\n\n993\n\n\nkdd_ipums_la_97-small\n\n\n7019\n\n\n61\n\n\n33\n\n\n27\n\n\n8\n\n\n2\n\n\n2594\n\n\n4425\n\n\n7019\n\n\n\n\n\n\n657\n\n\n803\n\n\ndelta_ailerons\n\n\n7129\n\n\n6\n\n\n5\n\n\n0\n\n\n0\n\n\n2\n\n\n3346\n\n\n3783\n\n\n0\n\n\n\n\n\n\n854\n\n\n1002\n\n\nkdd_ipums_la_98-small\n\n\n7485\n\n\n56\n\n\n16\n\n\n39\n\n\n8\n\n\n2\n\n\n791\n\n\n6694\n\n\n7369\n\n\n\n\n\n\n211\n\n\n300\n\n\nisolet\n\n\n7797\n\n\n618\n\n\n617\n\n\n0\n\n\n0\n\n\n26\n\n\n298\n\n\n300\n\n\n0\n\n\n\n\n\n\n22\n\n\n24\n\n\nmushroom\n\n\n8124\n\n\n23\n\n\n0\n\n\n22\n\n\n4\n\n\n2\n\n\n3916\n\n\n4208\n\n\n2480\n\n\n\n\n\n\n590\n\n\n735\n\n\ncpu_small\n\n\n8192\n\n\n13\n\n\n12\n\n\n0\n\n\n0\n\n\n2\n\n\n2477\n\n\n5715\n\n\n0\n\n\n\n\n\n\n607\n\n\n752\n\n\npuma32H\n\n\n8192\n\n\n33\n\n\n32\n\n\n0\n\n\n0\n\n\n2\n\n\n4064\n\n\n4128\n\n\n0\n\n\n\n\n\n\n616\n\n\n761\n\n\ncpu_act\n\n\n8192\n\n\n22\n\n\n21\n\n\n0\n\n\n0\n\n\n2\n\n\n2477\n\n\n5715\n\n\n0\n\n\n\n\n\n\n661\n\n\n807\n\n\nkin8nm\n\n\n8192\n\n\n9\n\n\n8\n\n\n0\n\n\n0\n\n\n2\n\n\n4024\n\n\n4168\n\n\n0\n\n\n\n\n\n\n670\n\n\n816\n\n\npuma8NH\n\n\n8192\n\n\n9\n\n\n8\n\n\n0\n\n\n0\n\n\n2\n\n\n4078\n\n\n4114\n\n\n0\n\n\n\n\n\n\n687\n\n\n833\n\n\nbank32nh\n\n\n8192\n\n\n33\n\n\n32\n\n\n0\n\n\n0\n\n\n2\n\n\n2543\n\n\n5649\n\n\n0\n\n\n\n\n\n\n775\n\n\n923\n\n\nvisualizing_soil\n\n\n8641\n\n\n5\n\n\n3\n\n\n1\n\n\n1\n\n\n2\n\n\n3888\n\n\n4753\n\n\n0\n\n\n\n\n\n\n870\n\n\n1018\n\n\nkdd_ipums_la_99-small\n\n\n8844\n\n\n57\n\n\n15\n\n\n41\n\n\n9\n\n\n2\n\n\n568\n\n\n8276\n\n\n8844\n\n\n\n\n\n\n902\n\n\n1056\n\n\nmc1\n\n\n9466\n\n\n39\n\n\n38\n\n\n0\n\n\n0\n\n\n2\n\n\n68\n\n\n9398\n\n\n0\n\n\n\n\n\n\n673\n\n\n819\n\n\ndelta_elevators\n\n\n9517\n\n\n7\n\n\n6\n\n\n0\n\n\n0\n\n\n2\n\n\n4732\n\n\n4785\n\n\n0\n\n\n\n\n\n\n260\n\n\n390\n\n\nnew3s.wc\n\n\n9558\n\n\n26833\n\n\n26832\n\n\n1\n\n\n0\n\n\n44\n\n\n104\n\n\n696\n\n\n0\n\n\n\n\n\n\n828\n\n\n976\n\n\nkdd_JapaneseVowels\n\n\n9961\n\n\n15\n\n\n14\n\n\n0\n\n\n0\n\n\n2\n\n\n1614\n\n\n8347\n\n\n0\n\n\n\n\n\n\n899\n\n\n1053\n\n\njm1\n\n\n10885\n\n\n22\n\n\n21\n\n\n0\n\n\n0\n\n\n2\n\n\n2106\n\n\n8779\n\n\n5\n\n\n\n\n\n\n30\n\n\n32\n\n\npendigits\n\n\n10992\n\n\n17\n\n\n16\n\n\n0\n\n\n0\n\n\n10\n\n\n1055\n\n\n1144\n\n\n0\n\n\n\n\n\n\n871\n\n\n1019\n\n\npendigits\n\n\n10992\n\n\n17\n\n\n16\n\n\n0\n\n\n0\n\n\n2\n\n\n1144\n\n\n9848\n\n\n0\n\n\n\n\n\n\n269\n\n\n399\n\n\nohscal.wc\n\n\n11162\n\n\n11466\n\n\n11465\n\n\n0\n\n\n0\n\n\n10\n\n\n709\n\n\n1621\n\n\n0\n\n\n\n\n\n\n24\n\n\n26\n\n\nnursery\n\n\n12960\n\n\n9\n\n\n0\n\n\n8\n\n\n1\n\n\n5\n\n\n2\n\n\n4320\n\n\n0\n\n\n\n\n\n\n811\n\n\n959\n\n\nnursery\n\n\n12960\n\n\n9\n\n\n0\n\n\n8\n\n\n1\n\n\n2\n\n\n4320\n\n\n8640\n\n\n0\n\n\n\n\n\n\n589\n\n\n734\n\n\nailerons\n\n\n13750\n\n\n41\n\n\n40\n\n\n0\n\n\n0\n\n\n2\n\n\n5828\n\n\n7922\n\n\n0\n\n\n\n\n\n\n883\n\n\n1036\n\n\nsylva_agnostic\n\n\n14395\n\n\n217\n\n\n216\n\n\n0\n\n\n0\n\n\n2\n\n\n886\n\n\n13509\n\n\n0\n\n\n\n\n\n\n887\n\n\n1040\n\n\nsylva_prior\n\n\n14395\n\n\n109\n\n\n108\n\n\n0\n\n\n0\n\n\n2\n\n\n886\n\n\n13509\n\n\n0\n\n\n\n\n\n\n577\n\n\n722\n\n\npol\n\n\n15000\n\n\n49\n\n\n48\n\n\n0\n\n\n0\n\n\n2\n\n\n5041\n\n\n9959\n\n\n0\n\n\n\n\n\n\n700\n\n\n846\n\n\nelevators\n\n\n16599\n\n\n19\n\n\n18\n\n\n0\n\n\n0\n\n\n2\n\n\n5130\n\n\n11469\n\n\n0\n\n\n\n\n\n\n964\n\n\n1120\n\n\nMagicTelescope\n\n\n19020\n\n\n12\n\n\n11\n\n\n0\n\n\n0\n\n\n2\n\n\n6688\n\n\n12332\n\n\n0\n\n\n\n\n\n\n6\n\n\n6\n\n\nletter\n\n\n20000\n\n\n17\n\n\n16\n\n\n0\n\n\n0\n\n\n26\n\n\n734\n\n\n813\n\n\n0\n\n\n\n\n\n\n829\n\n\n977\n\n\nletter\n\n\n20000\n\n\n17\n\n\n16\n\n\n0\n\n\n0\n\n\n2\n\n\n813\n\n\n19187\n\n\n0\n\n\n\n\n\n\n676\n\n\n822\n\n\ncal_housing\n\n\n20640\n\n\n9\n\n\n8\n\n\n0\n\n\n0\n\n\n2\n\n\n8385\n\n\n12255\n\n\n0\n\n\n\n\n\n\n677\n\n\n823\n\n\nhouses\n\n\n20640\n\n\n9\n\n\n8\n\n\n0\n\n\n0\n\n\n2\n\n\n8914\n\n\n11726\n\n\n0\n\n\n\n\n\n\n675\n\n\n821\n\n\nhouse_16H\n\n\n22784\n\n\n17\n\n\n16\n\n\n0\n\n\n0\n\n\n2\n\n\n6744\n\n\n16040\n\n\n0\n\n\n\n\n\n\n697\n\n\n843\n\n\nhouse_8L\n\n\n22784\n\n\n9\n\n\n8\n\n\n0\n\n\n0\n\n\n2\n\n\n6744\n\n\n16040\n\n\n0\n\n\n\n\n\n\n122\n\n\n184\n\n\nkropt\n\n\n28056\n\n\n7\n\n\n0\n\n\n6\n\n\n0\n\n\n18\n\n\n27\n\n\n4553\n\n\n0\n\n\n\n\n\n\n963\n\n\n1119\n\n\nadult-census\n\n\n32561\n\n\n16\n\n\n7\n\n\n8\n\n\n1\n\n\n2\n\n\n7841\n\n\n24720\n\n\n2399\n\n\n\n\n\n\n582\n\n\n727\n\n\n2dplanes\n\n\n40768\n\n\n11\n\n\n10\n\n\n0\n\n\n0\n\n\n2\n\n\n20348\n\n\n20420\n\n\n0\n\n\n\n\n\n\n734\n\n\n881\n\n\nmv\n\n\n40768\n\n\n11\n\n\n7\n\n\n3\n\n\n2\n\n\n2\n\n\n16447\n\n\n24321\n\n\n0\n\n\n\n\n\n\n753\n\n\n901\n\n\nfried\n\n\n40768\n\n\n11\n\n\n10\n\n\n0\n\n\n0\n\n\n2\n\n\n20341\n\n\n20427\n\n\n0\n\n\n\n\n\n\n117\n\n\n179\n\n\nadult\n\n\n48842\n\n\n15\n\n\n2\n\n\n12\n\n\n1\n\n\n2\n\n\n11687\n\n\n37155\n\n\n3620\n\n\n\n\n\n\n955\n\n\n1111\n\n\nKDDCup09_appetency\n\n\n50000\n\n\n231\n\n\n192\n\n\n38\n\n\n4\n\n\n2\n\n\n890\n\n\n49110\n\n\n50000\n\n\n\n\n\n\n956\n\n\n1112\n\n\nKDDCup09_churn\n\n\n50000\n\n\n231\n\n\n192\n\n\n39\n\n\nNA\n\n\n2\n\n\n3672\n\n\n46328\n\n\n50000\n\n\n\n\n\n\n958\n\n\n1114\n\n\nKDDCup09_upselling\n\n\n50000\n\n\n231\n\n\n192\n\n\n38\n\n\n4\n\n\n2\n\n\n3682\n\n\n46318\n\n\n50000\n\n\n\n\n\n\n414\n\n\n554\n\n\nmnist_784\n\n\n70000\n\n\n785\n\n\n784\n\n\n0\n\n\n0\n\n\n10\n\n\n6313\n\n\n7877\n\n\n0\n\n\n\n\n\n\n241\n\n\n357\n\n\nvehicle_sensIT\n\n\n98528\n\n\n101\n\n\n100\n\n\n1\n\n\n1\n\n\n2\n\n\n49264\n\n\n49264\n\n\n0\n\n\n\n\n\n\n118\n\n\n180\n\n\ncovertype\n\n\n110393\n\n\n55\n\n\n14\n\n\n40\n\n\n40\n\n\n7\n\n\n1339\n\n\n51682\n\n\n0\n\n\n\n\n\n\n196\n\n\n273\n\n\nIMDB.drama\n\n\n120919\n\n\n1002\n\n\n1001\n\n\n1\n\n\n1\n\n\n2\n\n\n43779\n\n\n77140\n\n\n0\n\n\n\n\n\n\n239\n\n\n351\n\n\ncodrna\n\n\n488565\n\n\n9\n\n\n8\n\n\n1\n\n\n1\n\n\n2\n\n\n162855\n\n\n325710\n\n\n0\n\n\n\n\n\n\n206\n\n\n293\n\n\ncovertype\n\n\n581012\n\n\n55\n\n\n54\n\n\n1\n\n\n1\n\n\n2\n\n\n283301\n\n\n297711\n\n\n0\n\n\n\n\n\n\n240\n\n\n354\n\n\npoker\n\n\n1025010\n\n\n11\n\n\n10\n\n\n1\n\n\n1\n\n\n2\n\n\n511308\n\n\n513702\n\n\n0",
            "title": "Data collections"
        },
        {
            "location": "/Data-collections/#efficient-and-robust-automated-machine-learning-feurer-et-al-nips-2015",
            "text": "Contact:  @mfeurer  Used in:  Efficient and Robust Automated Machine Learning  Datasets:  1000,1002,1018,1019,1020,1021,1036,1040,1041,1049,1050,1053,1056,1067,1068,1069,1111,1112,1114,1116,1119,1120,1128,1130,1134,1138,1139,1142,1146,1161,1166,12,14,16,179,180,181,182,184,185,18,21,22,23,24,26,273,28,293,300,30,31,32,351,354,357,36,389,38,390,391,392,393,395,396,398,399,3,401,44,46,554,57,60,679,6,715,718,720,722,723,727,728,734,735,737,740,741,743,751,752,761,772,797,799,803,806,807,813,816,819,821,822,823,833,837,843,845,846,847,849,866,871,881,897,901,903,904,910,912,913,914,917,923,930,934,953,958,959,962,966,971,976,977,978,979,980,991,993,995      did  name  n  p  p.num  p.syms  p.bin  n.class  minclass  maxclass  n.miss      29  31  credit-g  1000  21  7  13  2  2  300  700  0    570  715  fri_c3_1000_25  1000  26  25  0  0  2  443  557  0    573  718  fri_c4_1000_100  1000  101  100  0  0  2  436  564  0    578  723  fri_c4_1000_25  1000  26  25  0  0  2  453  547  0    595  740  fri_c3_1000_10  1000  11  10  0  0  2  440  560  0    598  743  fri_c1_1000_5  1000  6  5  0  0  2  457  543  0    606  751  fri_c4_1000_10  1000  11  10  0  0  2  440  560  0    651  797  fri_c4_1000_50  1000  51  50  0  0  2  440  560  0    653  799  fri_c0_1000_5  1000  6  5  0  0  2  497  503  0    660  806  fri_c3_1000_50  1000  51  50  0  0  2  445  555  0    667  813  fri_c3_1000_5  1000  6  5  0  0  2  437  563  0    691  837  fri_c1_1000_50  1000  51  50  0  0  2  453  547  0    699  845  fri_c0_1000_10  1000  11  10  0  0  2  491  509  0    703  849  fri_c0_1000_25  1000  26  25  0  0  2  497  503  0    719  866  fri_c2_1000_50  1000  51  50  0  0  2  418  582  0    755  903  fri_c2_1000_25  1000  26  25  0  0  2  437  563  0    756  904  fri_c0_1000_50  1000  51  50  0  0  2  490  510  0    762  910  fri_c1_1000_10  1000  11  10  0  0  2  436  564  0    764  912  fri_c2_1000_5  1000  6  5  0  0  2  416  584  0    765  913  fri_c2_1000_10  1000  11  10  0  0  2  420  580  0    769  917  fri_c1_1000_25  1000  26  25  0  0  2  454  546  0    262  392  oh0.wc  1003  3183  3182  0  0  10  51  194  0    535  679  rmftsa_sleepdata  1024  3  2  1  0  4  94  404  0    596  741  rmftsa_sleepdata  1024  3  1  1  0  2  509  515  0    271  401  oh10.wc  1050  3239  3238  0  0  10  52  165  0    914  1068  pc1  1109  22  21  0  0  2  77  1032  0    786  934  socmob  1156  6  1  4  2  2  256  900  0    749  897  colleges_aaup  1161  17  13  3  0  2  348  813  87    782  930  colleges_usnews  1302  35  32  2  0  2  614  688  1144    123  185  baseball  1340  18  15  2  0  3  57  1215  20    818  966  analcatdata_halloffame  1340  18  15  2  0  2  125  1215  20    896  1049  pc4  1458  38  37  0  0  2  178  1280  0    21  23  cmc  1473  10  2  7  3  3  333  629  0    119  181  yeast  1484  9  8  0  0  10  5  463  0    261  391  re0.wc  1504  2887  2886  0  0  13  11  608  0    972  1128  OVA_Breast  1545  10937  10936  1  0  2  344  1201  0    974  1130  OVA_Lung  1545  10937  10936  0  0  2  126  1419  0    978  1134  OVA_Kidney  1545  10937  10936  0  0  2  260  1285  0    982  1138  OVA_Uterus  1545  10937  10936  1  0  2  124  1421  0    983  1139  OVA_Omentum  1545  10937  10936  0  0  2  77  1468  0    986  1142  OVA_Endometrium  1545  10937  10936  0  0  2  61  1484  0    990  1146  OVA_Prostate  1545  10937  10936  0  0  2  69  1476  0    1005  1161  OVA_Colon  1545  10937  10936  0  0  2  286  1259  0    1010  1166  OVA_Ovary  1545  10937  10936  0  0  2  198  1347  0    268  398  wap.wc  1560  8461  8460  0  0  20  5  341  0    897  1050  pc3  1563  38  37  0  0  2  160  1403  0    265  395  re1.wc  1657  3759  3758  1  0  25  10  371  0    19  21  car  1728  7  0  6  0  4  65  1210  0    843  991  car  1728  7  0  6  0  2  518  1210  0    12  12  mfeat-factors  2000  217  216  0  0  10  200  200  0    14  14  mfeat-fourier  2000  77  76  0  0  10  200  200  0    16  16  mfeat-karhunen  2000  65  64  0  0  10  200  200  0    17  18  mfeat-morphological  2000  7  6  0  0  10  200  200  0    20  22  mfeat-zernike  2000  48  47  0  0  10  200  200  0    814  962  mfeat-morphological  2000  7  6  0  0  2  200  1800  0    823  971  mfeat-fourier  2000  77  76  0  0  2  200  1800  0    830  978  mfeat-factors  2000  217  216  0  0  2  200  1800  0    847  995  mfeat-zernike  2000  48  47  0  0  2  200  1800  0    872  1020  mfeat-karhunen  2000  65  64  0  0  2  200  1800  0    766  914  balloon  2001  3  2  0  0  2  482  1519  0    913  1067  kc1  2109  22  21  0  0  2  326  1783  0    627  772  quake  2178  4  3  0  0  2  969  1209  0    33  36  segment  2310  20  19  0  0  7  330  330  0    810  958  segment  2310  20  19  0  0  2  330  1980  0    259  389  fbis.wc  2463  2001  2000  0  0  17  38  506  0    263  393  la2s.wc  3075  12433  12432  1  0  6  248  905  0    592  737  space_ga  3107  7  6  0  0  2  1541  1566  0    42  46  splice  3190  62  0  61  0  3  767  1655  0    805  953  splice  3190  62  0  61  0  2  1535  1655  0    3  3  kr-vs-kp  3196  37  0  36  34  2  1527  1669  0    266  396  la1s.wc  3204  13196  13195  1  NA  6  273  943  0    888  1041  gina_prior2  3468  785  784  0  0  10  315  383  0    35  38  sick  3772  30  7  22  20  2  231  3541  3772    52  57  hypothyroid  3772  30  7  22  20  4  2  3481  3772    852  1000  hypothyroid  3772  30  7  22  20  2  291  3481  3772    724  871  pollen  3848  6  5  0  0  2  1924  1924  0    583  728  analcatdata_supreme  4052  8  7  0  0  2  971  3081  0    575  720  abalone  4177  9  7  1  0  2  2081  2096  0    41  44  spambase  4601  58  57  0  0  2  1813  2788  0    54  60  waveform-5000  5000  41  40  0  0  3  1653  1692  0    831  979  waveform-5000  5000  41  40  0  0  2  1692  3308  0    28  30  page-blocks  5473  11  10  0  0  5  28  4913  0    873  1021  page-blocks  5473  11  10  0  0  2  560  4913  0    915  1069  pc2  5589  37  36  0  0  2  23  5566  0    26  28  optdigits  5620  65  64  0  0  10  554  572  0    832  980  optdigits  5620  65  64  0  0  2  572  5048  0    120  182  satimage  6430  37  36  0  0  6  625  1531  0    701  847  wind  6574  15  14  0  0  2  3073  3501  0    960  1116  musk  6598  170  167  2  0  2  1017  5581  0    845  993  kdd_ipums_la_97-small  7019  61  33  27  8  2  2594  4425  7019    657  803  delta_ailerons  7129  6  5  0  0  2  3346  3783  0    854  1002  kdd_ipums_la_98-small  7485  56  16  39  8  2  791  6694  7369    211  300  isolet  7797  618  617  0  0  26  298  300  0    22  24  mushroom  8124  23  0  22  4  2  3916  4208  2480    590  735  cpu_small  8192  13  12  0  0  2  2477  5715  0    607  752  puma32H  8192  33  32  0  0  2  4064  4128  0    616  761  cpu_act  8192  22  21  0  0  2  2477  5715  0    661  807  kin8nm  8192  9  8  0  0  2  4024  4168  0    670  816  puma8NH  8192  9  8  0  0  2  4078  4114  0    687  833  bank32nh  8192  33  32  0  0  2  2543  5649  0    775  923  visualizing_soil  8641  5  3  1  1  2  3888  4753  0    870  1018  kdd_ipums_la_99-small  8844  57  15  41  9  2  568  8276  8844    902  1056  mc1  9466  39  38  0  0  2  68  9398  0    673  819  delta_elevators  9517  7  6  0  0  2  4732  4785  0    260  390  new3s.wc  9558  26833  26832  1  0  44  104  696  0    828  976  kdd_JapaneseVowels  9961  15  14  0  0  2  1614  8347  0    899  1053  jm1  10885  22  21  0  0  2  2106  8779  5    30  32  pendigits  10992  17  16  0  0  10  1055  1144  0    871  1019  pendigits  10992  17  16  0  0  2  1144  9848  0    269  399  ohscal.wc  11162  11466  11465  0  0  10  709  1621  0    24  26  nursery  12960  9  0  8  1  5  2  4320  0    811  959  nursery  12960  9  0  8  1  2  4320  8640  0    589  734  ailerons  13750  41  40  0  0  2  5828  7922  0    883  1036  sylva_agnostic  14395  217  216  0  0  2  886  13509  0    887  1040  sylva_prior  14395  109  108  0  0  2  886  13509  0    577  722  pol  15000  49  48  0  0  2  5041  9959  0    700  846  elevators  16599  19  18  0  0  2  5130  11469  0    964  1120  MagicTelescope  19020  12  11  0  0  2  6688  12332  0    6  6  letter  20000  17  16  0  0  26  734  813  0    829  977  letter  20000  17  16  0  0  2  813  19187  0    676  822  cal_housing  20640  9  8  0  0  2  8385  12255  0    677  823  houses  20640  9  8  0  0  2  8914  11726  0    675  821  house_16H  22784  17  16  0  0  2  6744  16040  0    697  843  house_8L  22784  9  8  0  0  2  6744  16040  0    122  184  kropt  28056  7  0  6  0  18  27  4553  0    963  1119  adult-census  32561  16  7  8  1  2  7841  24720  2399    582  727  2dplanes  40768  11  10  0  0  2  20348  20420  0    734  881  mv  40768  11  7  3  2  2  16447  24321  0    753  901  fried  40768  11  10  0  0  2  20341  20427  0    117  179  adult  48842  15  2  12  1  2  11687  37155  3620    955  1111  KDDCup09_appetency  50000  231  192  38  4  2  890  49110  50000    956  1112  KDDCup09_churn  50000  231  192  39  NA  2  3672  46328  50000    958  1114  KDDCup09_upselling  50000  231  192  38  4  2  3682  46318  50000    414  554  mnist_784  70000  785  784  0  0  10  6313  7877  0    241  357  vehicle_sensIT  98528  101  100  1  1  2  49264  49264  0    118  180  covertype  110393  55  14  40  40  7  1339  51682  0    196  273  IMDB.drama  120919  1002  1001  1  1  2  43779  77140  0    239  351  codrna  488565  9  8  1  1  2  162855  325710  0    206  293  covertype  581012  55  54  1  1  2  283301  297711  0    240  354  poker  1025010  11  10  1  1  2  511308  513702  0",
            "title": "Efficient and Robust Automated Machine Learning - Feurer et al. - NIPS 2015"
        },
        {
            "location": "/Data-Repositories/",
            "text": "This is a list of public dataset repositories we aim to connect to for getting more varied datasets in OpenML.\nThese have widely varying data formats, so we need both manual selection plus automatic conversion or meta-data extraction to make them easily usable.\n\n\n\n\n\n\nA collection of sources made by different users\n\n\n\n\n\n\nhttps://github.com/caesar0301/awesome-public-datasets\n\n\n\n\n\n\nhttps://dreamtolearn.com/ryan/1001_datasets\n\n\n\n\n\n\nMachine learning dataset repositories (mostly already in OpenML)\n\n\n\n\n\n\nUCI: \nhttps://archive.ics.uci.edu/ml/index.html\n\n\n\n\nKEEL: \nhttp://sci2s.ugr.es/keel/datasets.php\n\n\nLIBSVM: \nhttp://www.csie.ntu.edu.tw/~cjlin/libsvmtools/datasets/\n\n\n\n\nAutoWEKA datasets: \nhttp://www.cs.ubc.ca/labs/beta/Projects/autoweka/datasets/\n\n\n\n\n\n\nTime series data:\n\n\n\n\nUCR: \nhttp://timeseriesclassification.com/\n\n\n\n\nOlder version: \nhttp://www.cs.ucr.edu/~eamonn/time_series_data/\n\n\n\n\n\n\nDeep learning datasets (mostly image data)\n\n\n\n\nhttp://deeplearning.net/datasets/\n\n\nhttps://deeplearning4j.org/opendata\n\n\n\n\nhttp://rodrigob.github.io/are_we_there_yet/build/classification_datasets_results.html\n\n\n\n\n\n\nExtreme classification:\n\n\n\n\n\n\nhttp://manikvarma.org/downloads/XC/XMLRepository.html\n\n\n\n\n\n\nMLData (will merge with OpenML in 2017)\n\n\n\n\n\n\nhttp://mldata.org/\n\n\n\n\nAutoWEKA datasets:\n\n\n\n\nhttp://www.cs.ubc.ca/labs/beta/Projects/autoweka/datasets/\n\n\n\n\nKaggle public datasets\n\n\n\n\nhttps://www.kaggle.com/datasets\n\n\n\n\nRAMP Challenge datasets\n\n\n\n\nhttp://www.ramp.studio/data_domains\n\n\n\n\nWolfram data repository \n\n\n\n\nhttp://datarepository.wolframcloud.com/\n\n\n\n\nData.world\n\n\n\n\nhttps://data.world/\n\n\n\n\nFigshare (needs digging, lots of Excel files)\n\n\n\n\nhttps://figshare.com/search?q=dataset&quick=1\n\n\n\n\nKDNuggets list of data sets (meta-list, lots of stuff here):\n\n\n\n\nhttp://www.kdnuggets.com/datasets/index.html\n\n\n\n\nBenchmark Data Sets for Highly Imbalanced Binary Classification\n\n\n\n\nhttp://www.cs.gsu.edu/~zding/research/imbalance-data/x19data.txt\n\n\n\n\nFeature Selection Challenge Datasets\n\n\n\n\nhttp://www.nipsfsc.ecs.soton.ac.uk/datasets/\n\n  \nhttp://featureselection.asu.edu/datasets.php\n\n\n\n\nBigML's list of 1000+ data sources\n\n\n\n\nhttp://blog.bigml.com/2013/02/28/data-data-data-thousands-of-public-data-sources/\n\n\n\n\nMassive list from Data Science Central.\n\n\n\n\nhttp://www.datasciencecentral.com/profiles/blogs/data-sources-for-cool-data-science-projects\n \n\n\n\n\n\n\nR packages (also see \nhttps://github.com/openml/openml-r/issues/185\n)\n\n\n\n\n\n\nhttp://stat.ethz.ch/R-manual/R-patched/library/datasets/html/00Index.html\n\n\n\n\nmlbench\n\n\n\n\nStata datasets: \nhttp://www.stata-press.com/data/r13/r.html\n\n\n\n\n\n\nUTwente Activity recognition datasets:\n\n\n\n\n\n\nhttp://ps.ewi.utwente.nl/Datasets.php\n\n\n\n\nVanderbilt:\n\n\n\n\nhttp://biostat.mc.vanderbilt.edu/wiki/Main/DataSets\n\n\n\n\nQuandl\n\n\n\n\nhttps://www.quandl.com\n\n\n\n\nMicroarray data:  \n\n\n\n\nhttp://genomics-pubs.princeton.edu/oncology/\n\n  \nhttp://svitsrv25.epfl.ch/R-doc/library/multtest/html/golub.html\n\n\n\n\nMedical data:\n\n\n\n\nhttp://www.healthdata.gov/\n\n\nhttp://homepages.inf.ed.ac.uk/rbf/IAPR/researchers/PPRPAGES/pprdat.htm\n\n\nhttp://hcup-us.ahrq.gov/\n\n\nhttps://www.cms.gov/Research-Statistics-Data-and-Systems/Statistics-Trends-and-Reports/Medicare-Provider-Charge-Data/Physician-and-Other-Supplier.html\n\n\nhttps://nsduhweb.rti.org/respweb/homepage.cfm\n\n\nhttp://orwh.od.nih.gov/resources/policyreports/womenofcolor.asp\n  \n\n\n\n\nNature.com Scientific data repositories list\n\n\n\n\nhttps://www.nature.com/sdata/policies/repositories",
            "title": "Data Repositories"
        },
        {
            "location": "/Helper-functions/",
            "text": "Mostly written in Java, these functions build search indexes, compute dataset characteristics, generate tasks and evaluate the results of certain tasks.\n\n\nCode\n\n\nThe Java code is available in the 'OpenML' repository: \nhttps://github.com/openml/OpenML/tree/master/Java\n\n\nComponents\n\n\nGeneral:\n- \nOpenML\n: Building Lucene search index and smaller tools, e.g. extracting documentation from WEKA source files and ARFF files\n- \ngenerateApiDocs\n: Generates API HTML Documentation\n- \nhttp_post_file\n: Example how to post files to the api using Java.\n\n\nSupport for tasks:\n- \nfoldgeneration\n: Java code for generating cross-validation folds. Can be used from command line.\n- \nsplitgeneration\n: Split generator for cross validation and holdout. Unsure what's the difference with the previous?\n- \ngenerate_predictions\n: Helper class to build prediction files based on WEKA output. Move to WEKA repository?\n- \nevaluate_predictions\n: The evaluation engine computing evaluation scores based on submitted predictions",
            "title": "Helper functions"
        },
        {
            "location": "/Helper-functions/#code",
            "text": "The Java code is available in the 'OpenML' repository:  https://github.com/openml/OpenML/tree/master/Java",
            "title": "Code"
        },
        {
            "location": "/Helper-functions/#components",
            "text": "General:\n-  OpenML : Building Lucene search index and smaller tools, e.g. extracting documentation from WEKA source files and ARFF files\n-  generateApiDocs : Generates API HTML Documentation\n-  http_post_file : Example how to post files to the api using Java.  Support for tasks:\n-  foldgeneration : Java code for generating cross-validation folds. Can be used from command line.\n-  splitgeneration : Split generator for cross validation and holdout. Unsure what's the difference with the previous?\n-  generate_predictions : Helper class to build prediction files based on WEKA output. Move to WEKA repository?\n-  evaluate_predictions : The evaluation engine computing evaluation scores based on submitted predictions",
            "title": "Components"
        },
        {
            "location": "/URL-Mapping/",
            "text": "URL to Page Mapping\n\n\nMost pages in OpenML are represented by a folder in\n\n/openml_OS/views/pages/frontend\nThe contents of this folder will be parsed in the template\n\nfrontend_main.php\n template, as described in [[backend]]. In\nthis section we explain the way an URL is mapped to a certain OpenML\npage.\n\n\nURL Anatomy\n\n\nBy default, CodeIgniter (and OpenML) accepts a URL in the following\nform:\n\nhttp://www.openml.org/index.php/<controller>/<function>/<p1>/<pN>/<free>\n\nThe various parts in the URL are divided by slashes. Every URL starts\nwith the protocol and server name (in the case of OpenML this is\n\nhttp://www.openml.org/\n). This is followed by the bootstrap file, which\nis always the same, i.e., \nindex.php\n. The next part indicates the\ncontroller that needs to be invoked; typically this is \nfrontend\n,\n\nrest_api\n or \ndata\n, but it can be any file from the \nopenml_OS\n folder\n\ncontrollers\n. Note that the suffix \n.php\n should not be included in the\nURL.\n\n\nThe next part indicates which function of the controller should be\ninvoked. This should be a existing, public function from the controller\nthat is indicated in the controller part. These functions might have one\nor more parameters that need to be set. This is the following part of\nthe URL (indicated by \np1\n and \npN\n). The parameters can be followed by\nanything in free format. Typically, this free format is used to pass on\nadditional parameters in \nname\n - \nvalue\n format, or just a way of\nadding a human readable string to the URL for SEO purposes.\n\n\nFor example, the following URL\n\nhttp://www.openml.org/index.php/frontend/page/home\n invokes\nthe function \npage\n from the \nfrontend\n controller and sets the only\nparameter of this function, \n$indicator\n, to value \nhome\n. The function\n\npage\n loads the content of the specified folder (\n$indicator\n) into the\nmain template. In this sense, the function \npage\n can be seen as some\nsort of specialized page loader.\n\n\nURL Shortening\n\n\nSince it is good practice to have URL\u2019s as short as possible, we have\nintroduced some logic that shortens the URL\u2019s. Most importantly, the URL\npart that invokes \nindex.php\n can be removed at no cost, since this file\nis \nalways\n invoked. For this, we use Apache\u2019s rewrite engine. Rules\nfor rewriting URL\u2019s can be found in the \n.htaccess\n file, but is\nsuffices to say that any URL in the following format\n\nhttp://www.openml.org/index.php/<controller>/<function>/<params>\n\ncan due to the rewrite engine also be requested with\n\nhttp://www.openml.org/<controller>/<function>/<params>\n\n\nFurthermore, since most of the pages are invoked by the function \npage\n\nof the \nfrontend\n controller (hence, they come with the suffix\n\nfrontend/page/page_name\n) we also created a mapping that maps URL\u2019s in\nthe following form\n\nhttp://www.openml.org/<page_name>\n \nto\n\nhttp://www.openml.org/frontend/page/<page_name>\n\nNote that Apache\u2019s rewrite engine will also add \nindex.php\n to this. The\nexact mapping can be found in \nroutes.php\n config file.\n\n\nAdditional Mappings\n\n\nAdditionally, a mapping is created from the following type of URL:\n\nhttp://www.openml.org/api/<any_query_string>\n\nto\n\nhttp://www.openml.org/rest_api/<any_query_string>\n\nThis was done for backwards compatibility. Many plugins make calls to\nthe not-existing \napi\n controller, which are automatically redirected to\nthe \nrest_api\n controller.\n\n\nExceptions\n\n\nIt is important to note that not all pages do have a specific page\nfolder. The page folders are a good way of structuring complex GUI\u2019s\nthat need to be presented to the user, but in cases where the internal\nstate changes are more important than the GUI\u2019s, it might be preferable\nto make the controller function print the output directly. This happens\nfor example in the functions of \nrest_api.php\n and \nfree_query.php\n\n(although the former still has some files in the views folder that it\nrefers to).",
            "title": "URL Mapping"
        },
        {
            "location": "/URL-Mapping/#url-to-page-mapping",
            "text": "Most pages in OpenML are represented by a folder in /openml_OS/views/pages/frontend\nThe contents of this folder will be parsed in the template frontend_main.php  template, as described in [[backend]]. In\nthis section we explain the way an URL is mapped to a certain OpenML\npage.",
            "title": "URL to Page Mapping"
        },
        {
            "location": "/URL-Mapping/#url-anatomy",
            "text": "By default, CodeIgniter (and OpenML) accepts a URL in the following\nform: http://www.openml.org/index.php/<controller>/<function>/<p1>/<pN>/<free> \nThe various parts in the URL are divided by slashes. Every URL starts\nwith the protocol and server name (in the case of OpenML this is http://www.openml.org/ ). This is followed by the bootstrap file, which\nis always the same, i.e.,  index.php . The next part indicates the\ncontroller that needs to be invoked; typically this is  frontend , rest_api  or  data , but it can be any file from the  openml_OS  folder controllers . Note that the suffix  .php  should not be included in the\nURL.  The next part indicates which function of the controller should be\ninvoked. This should be a existing, public function from the controller\nthat is indicated in the controller part. These functions might have one\nor more parameters that need to be set. This is the following part of\nthe URL (indicated by  p1  and  pN ). The parameters can be followed by\nanything in free format. Typically, this free format is used to pass on\nadditional parameters in  name  -  value  format, or just a way of\nadding a human readable string to the URL for SEO purposes.  For example, the following URL http://www.openml.org/index.php/frontend/page/home  invokes\nthe function  page  from the  frontend  controller and sets the only\nparameter of this function,  $indicator , to value  home . The function page  loads the content of the specified folder ( $indicator ) into the\nmain template. In this sense, the function  page  can be seen as some\nsort of specialized page loader.",
            "title": "URL Anatomy"
        },
        {
            "location": "/URL-Mapping/#url-shortening",
            "text": "Since it is good practice to have URL\u2019s as short as possible, we have\nintroduced some logic that shortens the URL\u2019s. Most importantly, the URL\npart that invokes  index.php  can be removed at no cost, since this file\nis  always  invoked. For this, we use Apache\u2019s rewrite engine. Rules\nfor rewriting URL\u2019s can be found in the  .htaccess  file, but is\nsuffices to say that any URL in the following format http://www.openml.org/index.php/<controller>/<function>/<params> \ncan due to the rewrite engine also be requested with http://www.openml.org/<controller>/<function>/<params>  Furthermore, since most of the pages are invoked by the function  page \nof the  frontend  controller (hence, they come with the suffix frontend/page/page_name ) we also created a mapping that maps URL\u2019s in\nthe following form http://www.openml.org/<page_name>  \nto http://www.openml.org/frontend/page/<page_name> \nNote that Apache\u2019s rewrite engine will also add  index.php  to this. The\nexact mapping can be found in  routes.php  config file.",
            "title": "URL Shortening"
        },
        {
            "location": "/URL-Mapping/#additional-mappings",
            "text": "Additionally, a mapping is created from the following type of URL: http://www.openml.org/api/<any_query_string> \nto http://www.openml.org/rest_api/<any_query_string> \nThis was done for backwards compatibility. Many plugins make calls to\nthe not-existing  api  controller, which are automatically redirected to\nthe  rest_api  controller.",
            "title": "Additional Mappings"
        },
        {
            "location": "/URL-Mapping/#exceptions",
            "text": "It is important to note that not all pages do have a specific page\nfolder. The page folders are a good way of structuring complex GUI\u2019s\nthat need to be presented to the user, but in cases where the internal\nstate changes are more important than the GUI\u2019s, it might be preferable\nto make the controller function print the output directly. This happens\nfor example in the functions of  rest_api.php  and  free_query.php \n(although the former still has some files in the views folder that it\nrefers to).",
            "title": "Exceptions"
        },
        {
            "location": "/Job-Scheduling/",
            "text": "In many cases, a scientist could be interested in running a wide range of flows over a range of datasets (or tasks). For this purpose, a job scheduler has been implemented. OpenML maintains a list of (setup,task) tuples, that users requested to run. A setup is a flow with information about all parameter settings.\n\n\nFlows can be linked to a specific workbench. For example, the flows weka.J48(1) (which has id 60) and weka.SMO_PolyKernel(1) (which has id 70) are linked to Weka_3.7.10. When the same algorithm is uploaded from out another Weka version, a new version of the implementation is registered at OpenML. For example, if we would upload weka.J48 from the old version weka_3.7.5, OpenML would register the implementation as weka.J48(2). (In fact, this is what actually happend. See implementation id 100.)\n\n\nIn order to schedule jobs, go to the job scheduler (\nAlpha version\n, no guarantees). Select a task type, and give the experiment a name. It is important to filter the tasks and setups using the menu on the left, since the overview can be huge. Note that there are a some tasks on \"big datasets\", which can slow down the experimentation proces. Be considerate including those. Also make sure to filter on setups with flows of your own workbench version. If these are not in the system yet, register these \non the share page\n. \n\n\n[OpenML Weka]\nThe OpenML weka package can be used to automatically execute the scheduled jobs. Run it with the following command: \n\n\njava -cp openmlweka.jar org.openml.weka.experiment.RunJob -T 3 -N 1000\n\n\nWith T being the task type to execute, and N the number of runs you want to perform. (You can set this number as high as you like, the experimenter will stop as soon as there are no jobs left.) Note that this experimenter will only execute jobs that are of this Weka version. \n\n\nThe OpenML Weka package can automatically register implementations on OpenML. Using the GUI, execute an OpenML task with all the implementations that you want to be registered. Before running those, these will automatically be registered on OpenML.",
            "title": "Job Scheduling"
        },
        {
            "location": "/Local-Installation/",
            "text": "Docker installation\n\n\nThe easiest way to set up a local version is to use the docker container provided here:\n\nhttps://github.com/nodechef/openML_docker_server\n\n\nRequirements\n\n\nYou'll need to have the following software running:\n* Apache Webserver, (with the rewrite module enabled. Is installed by default,\nnot enabled.)\n* MySQL Server.\n* PHP 5.5 or higher (comes also with Apache)\nOr just a XAMP (Mac), LAMP (Linux) or WAMP (Windows) package, which conveniently contains all these applications.\n\n\nDatabases\n\n\nNext, OpenML runs on two databases, a public database with all experiment information, and a private database, with information like user accounts etc. The latest version of both databases can be downloaded here: \nhttps://www.openml.org/guide/developers\n\n\nObviously, the private database does not include any actual user account info.\n\n\nBackend\n\n\nThe source code is available in the 'OpenML' repository: \nhttps://github.com/openml/OpenML\n\n\nOpenML is written in PHP, and can be 'installed' by copying all files in the 'www' or 'public_html' directory of Apache. \n\n\nAfter that, you need to provide your local paths and database accounts and passwords using the config file in:\n'APACHE_WWW_DIR'/openml_OS/config/BASE_CONFIG.php. \n\n\nIf everything is configured correctly, OpenML should now be running.\n\n\nSearch Indices\n\n\nIf you want to run your own (separate) OpenML instance, and store your own data, you'll also want to build your own search indices to show all data on the website. The OpenML website is based on the ElasticSearch stack. To install it, follow the instructions here: \nhttp://knowm.org/how-to-set-up-the-elk-stack-elasticsearch-logstash-and-kibana/",
            "title": "Local Installation"
        },
        {
            "location": "/Local-Installation/#docker-installation",
            "text": "The easiest way to set up a local version is to use the docker container provided here: https://github.com/nodechef/openML_docker_server",
            "title": "Docker installation"
        },
        {
            "location": "/Local-Installation/#requirements",
            "text": "You'll need to have the following software running:\n* Apache Webserver, (with the rewrite module enabled. Is installed by default,\nnot enabled.)\n* MySQL Server.\n* PHP 5.5 or higher (comes also with Apache)\nOr just a XAMP (Mac), LAMP (Linux) or WAMP (Windows) package, which conveniently contains all these applications.",
            "title": "Requirements"
        },
        {
            "location": "/Local-Installation/#databases",
            "text": "Next, OpenML runs on two databases, a public database with all experiment information, and a private database, with information like user accounts etc. The latest version of both databases can be downloaded here:  https://www.openml.org/guide/developers  Obviously, the private database does not include any actual user account info.",
            "title": "Databases"
        },
        {
            "location": "/Local-Installation/#backend",
            "text": "The source code is available in the 'OpenML' repository:  https://github.com/openml/OpenML  OpenML is written in PHP, and can be 'installed' by copying all files in the 'www' or 'public_html' directory of Apache.   After that, you need to provide your local paths and database accounts and passwords using the config file in:\n'APACHE_WWW_DIR'/openml_OS/config/BASE_CONFIG.php.   If everything is configured correctly, OpenML should now be running.",
            "title": "Backend"
        },
        {
            "location": "/Local-Installation/#search-indices",
            "text": "If you want to run your own (separate) OpenML instance, and store your own data, you'll also want to build your own search indices to show all data on the website. The OpenML website is based on the ElasticSearch stack. To install it, follow the instructions here:  http://knowm.org/how-to-set-up-the-elk-stack-elasticsearch-logstash-and-kibana/",
            "title": "Search Indices"
        },
        {
            "location": "/WebApp-(PHP)/",
            "text": "Backend\n\n\nThe high-level architecture of the website, including the controllers for different parts of the website (REST API, html, ...) and connections to the database.\n\n\nCode\n\n\nThe source code is available in the 'website' repository:\n\nhttps://github.com/openml/website\n\n\nImportant files and folders\n\n\nIn this section we go through all important files and folder of the\nsystem.\n\n\nRoot directory\n\n\nThe root directory of OpenML contains the following files and folders.\n\n\n\n\n\n\nsystem\n: This folder contains all files provided by\n    CodeIgniter 2.1.3. The contents of this folder is\n    beyond the scope of this document, and not relevant for extending\n    OpenML. All the files in this folder are in the same state as they\n    were provided by Ellislabs, and none of these files should ever be\n    changed.\n\n\n\n\n\n\nsparks\n: Sparks is a package management system for\n    Codeigniter that allows for instant installation of libraries into\n    the application. This folder contains two libraries provided by\n    third party software developers, oauth1 (based on version 1 the\n    oauth protocol) and oauth2 (similarly, based on version 2 of the\n    oauth protocol). The exact contents of this folder is beyond the\n    scope of this document and not relevant for extending OpenML.\n\n\n\n\n\n\nopenml_OS\n: All files in this folder are written specifically\n    for OpenML. When extending the functionality OpenML, usually one of\n    the files in this folder needs to be adjusted. As a thorough\n    understanding of the contents of this folder is vital for extending\n    OpenML, we will discuss the contents of this folder in\n    [[URL Mapping]] in more detail.\n\n\n\n\n\n\nindex.php\n: This is the \u201cbootstrap\u201d file of the system.\n    Basically, every page request on OpenML goes through this file (with\n    the css, images and javascript files as only exception). It then\n    determines which CodeIgniter and OpenML files need to be included.\n    This file should not be edited.\n\n\n\n\n\n\n.htaccess\n: This file (which configures the Apache Rewrite\n    Engine) makes sure that all URL requests will be directed to\n    \nindex.php\n. Without this file, we would need to include \nindex.php\n\n    explicitly in every URL request. This file makes sure that all other\n    URL requests without \nindex.php\n embedded in it automatically will\n    be transformed to \nindex.php\n. Eg.,\n    \nhttp://www.openml.org/frontend/page/home\n will be rewritten to\n    \nhttp://www.openml.org/index.php/frontend/page/home\n. This will be\n    explained in detail in [[URL Mapping]].\n\n\n\n\n\n\ncss\n: A folder containing all stylesheets. These are important\n    for the layout of OpenML.\n\n\n\n\n\n\ndata\n: A folder containing data files, e.g., datasets,\n    implementation files, uploaded content. Please note that this folder\n    does not necessarily needs to be present in the root directory. The\n    OpenML Base Config file determines the\n    exact location of this folder.\n\n\n\n\n\n\ndownloads\n: Another data folder, containing files like the most\n    recent database snapshot.\n\n\n\n\n\n\nimg\n: A folder containing all static images shown on the webpage.\n\n\n\n\n\n\njs\n: A folder containing all used Javascript files and libraries,\n    including third party libraries like jQuery and datatables.\n\n\n\n\n\n\nVarious other files, like .gitignore, favicon.ico, etc.\n\n\n\n\n\n\nopenml_OS\n\n\nThis folder is (in CodeIgniter jargon) the \u201cApplication folder\u201d, and\ncontains all files relevant to OpenML. Within this folder, the following\nfolders should be present: (And also some other folders, but these are\nnot used by OpenML)\n\n\n\n\n\n\nconfig\n: A folder containing all config files. Most notably, it\n    contains the file \nBASE_CONFIG.php\n, in which all system\n    specific variables are set; the config items within this file\n    differs over various installations (e.g., on localhost,\n    \nopenml.org\n). Most other config files, like\n    \ndatabase.php\n, will receive their values from\n    \nBASE_CONFIG.php\n. Other important config files are\n    \nautoload.php\n, determining which CodeIgniter / OpenML\n    files will be loaded on any request, \nopenML.php\n,\n    containing config items specific to OpenML, and\n    \nroutes.php\n, which will be explained in\n    [[URL Mapping]].\n\n\n\n\n\n\ncontrollers\n: In the Model/View/Controller design pattern, all\n    user interaction goes through controllers. In a webapplication\n    setting this means that every time a URL gets requested, exactly one\n    controller gets invoked. The exact dynamics of this will be\n    explained in [[URL Mapping]].\n\n\n\n\n\n\ncore\n: A folder that contains CodeIgniter specific files. These\n    are not relevant for the understanding of OpenML.\n\n\n\n\n\n\nhelpers\n: This folder contains many convenience functions.\n    Wikipedia states: \u201cA convenience function is a non-essential\n    subroutine in a programming library or framework which is intended\n    to ease commonly performed tasks\u201d. For example the\n    \nfile_upload_helper.php\n contains many functions that\n    assist with uploading of files. Please note that a helper function\n    must be explicitly loaded in either the autoload config or the files\n    that uses its functions.\n\n\n\n\n\n\nlibraries\n: Similar to sparks, this folder contains libraries\n    specifically written for CodeIgniter. For example, the library used\n    for all user management routines is in this folder.\n\n\n\n\n\n\nmodels\n: In the Model/View/Controller design pattern, models\n    represent the state of the system. In a webapplication setting, you\n    could say that a model is the link to the database. In OpenML,\n    almost all tables of the database are represented by a model. Each\n    model has general functionality applicable to all models (e.g.,\n    retrieve all records, retrieve record with constraints, insert\n    record) and functionality specific to that model (e.g., retrieve a\n    dataset that has certain data properties). Most models extend an\n    (abstract) base class, located in the \nabstract\n folder.\n    This way, all general functionality is programmed and maintained in\n    one place.\n\n\n\n\n\n\nthird_party\n: Although the name might suggests differently, this\n    folder contains all OpenML Java libraries.\n\n\n\n\n\n\nviews\n: In the Model/View/Controller design pattern, the views\n    are the way information is presented on the screen. In a\n    webapplication setting, a view usually is a block of (PHP generated)\n    HTML code. The most notable view is \nfrontend_main.php\n,\n    which is the template file determining the main look and feel of\n    OpenML. Every single page also has its own specific view (which is\n    parsed within \nfrontend_main.php\n). These pages can be\n    found (categorized by controller and name) in the \npages\n\n    folder. More about this structure is explained in\n    [[URL Mapping]].\n\n\n\n\n\n\nFrontend\n\n\nArchitecture and libraries involved in generating the frontend functions.\n\n\nCode\n\n\nhttps://github.com/openml/website/tree/master/openml_OS/views\n\n\nHigh-level\n\n\nAll pages are generated by first loading \nfrontend_main.php\n. This creates the 'shell' in which the content is loaded. It loads all css and javascript libraries, and contains the html for displaying headers and footers.\n\n\nCreate new page\n\n\nThe preferred method is creating a new folder into the folder\n\n<root_directory>/openml_OS/views/pages/frontend\n\nThis page can be requested by\n\nhttp://www.openml.org/frontend/page/<folder_name>\n\nor just\n\nhttp://www.openml.org/<folder_name>\n\nThis method is preferred for human readable webpages, where the internal\nactions are simple, and the output is complex. We will describe the\nfiles that can be in this folder.\n\n\n\n\n\n\npre.php\n: Mandatory file. Will be executed first. Do not make\n    this file produce any output! Can be used to pre-render data, or set\n    some variables that are used in other files.\n\n\n\n\n\n\nbody.php\n: Highly recommended file. Intended for displaying the\n    main content of this file. Will be rendered at the right location\n    within the template file (\nfrontend_main.php\n).\n\n\n\n\n\n\njavascript.php\n: Non-mandatory file. Intended for javascript\n    function on which \nbody.php\n relies. Will be rendered within a\n    javascript block in the header of the page.\n\n\n\n\n\n\npost.php\n: Non mandatory file. Will only be executed when a POST\n    request is done (e.g., when a HTML form was send using the POST\n    protocol). Will be executed after \npre.php\n, but before the\n    rendering process (and thus, before \nbody.php\n and\n    \njavascript.php\n). Should handle the posted input, e.g., file\n    uploads.\n\n\n\n\n\n\nIt is also recommended to add the newly created folder to the mapping in\nthe \nroutes.php\n config file. This way it can also be requested by the\nshortened version of the URL. (Note that we deliberately avoided to\nauto-load all pages into this file using a directory scan, as this makes\nthe webplatform slow. )\n\n\nFor more information, see [[URL Mapping]].",
            "title": "WebApp (PHP)"
        },
        {
            "location": "/WebApp-(PHP)/#backend",
            "text": "The high-level architecture of the website, including the controllers for different parts of the website (REST API, html, ...) and connections to the database.",
            "title": "Backend"
        },
        {
            "location": "/WebApp-(PHP)/#code",
            "text": "The source code is available in the 'website' repository: https://github.com/openml/website",
            "title": "Code"
        },
        {
            "location": "/WebApp-(PHP)/#important-files-and-folders",
            "text": "In this section we go through all important files and folder of the\nsystem.",
            "title": "Important files and folders"
        },
        {
            "location": "/WebApp-(PHP)/#root-directory",
            "text": "The root directory of OpenML contains the following files and folders.    system : This folder contains all files provided by\n    CodeIgniter 2.1.3. The contents of this folder is\n    beyond the scope of this document, and not relevant for extending\n    OpenML. All the files in this folder are in the same state as they\n    were provided by Ellislabs, and none of these files should ever be\n    changed.    sparks : Sparks is a package management system for\n    Codeigniter that allows for instant installation of libraries into\n    the application. This folder contains two libraries provided by\n    third party software developers, oauth1 (based on version 1 the\n    oauth protocol) and oauth2 (similarly, based on version 2 of the\n    oauth protocol). The exact contents of this folder is beyond the\n    scope of this document and not relevant for extending OpenML.    openml_OS : All files in this folder are written specifically\n    for OpenML. When extending the functionality OpenML, usually one of\n    the files in this folder needs to be adjusted. As a thorough\n    understanding of the contents of this folder is vital for extending\n    OpenML, we will discuss the contents of this folder in\n    [[URL Mapping]] in more detail.    index.php : This is the \u201cbootstrap\u201d file of the system.\n    Basically, every page request on OpenML goes through this file (with\n    the css, images and javascript files as only exception). It then\n    determines which CodeIgniter and OpenML files need to be included.\n    This file should not be edited.    .htaccess : This file (which configures the Apache Rewrite\n    Engine) makes sure that all URL requests will be directed to\n     index.php . Without this file, we would need to include  index.php \n    explicitly in every URL request. This file makes sure that all other\n    URL requests without  index.php  embedded in it automatically will\n    be transformed to  index.php . Eg.,\n     http://www.openml.org/frontend/page/home  will be rewritten to\n     http://www.openml.org/index.php/frontend/page/home . This will be\n    explained in detail in [[URL Mapping]].    css : A folder containing all stylesheets. These are important\n    for the layout of OpenML.    data : A folder containing data files, e.g., datasets,\n    implementation files, uploaded content. Please note that this folder\n    does not necessarily needs to be present in the root directory. The\n    OpenML Base Config file determines the\n    exact location of this folder.    downloads : Another data folder, containing files like the most\n    recent database snapshot.    img : A folder containing all static images shown on the webpage.    js : A folder containing all used Javascript files and libraries,\n    including third party libraries like jQuery and datatables.    Various other files, like .gitignore, favicon.ico, etc.",
            "title": "Root directory"
        },
        {
            "location": "/WebApp-(PHP)/#openml_os",
            "text": "This folder is (in CodeIgniter jargon) the \u201cApplication folder\u201d, and\ncontains all files relevant to OpenML. Within this folder, the following\nfolders should be present: (And also some other folders, but these are\nnot used by OpenML)    config : A folder containing all config files. Most notably, it\n    contains the file  BASE_CONFIG.php , in which all system\n    specific variables are set; the config items within this file\n    differs over various installations (e.g., on localhost,\n     openml.org ). Most other config files, like\n     database.php , will receive their values from\n     BASE_CONFIG.php . Other important config files are\n     autoload.php , determining which CodeIgniter / OpenML\n    files will be loaded on any request,  openML.php ,\n    containing config items specific to OpenML, and\n     routes.php , which will be explained in\n    [[URL Mapping]].    controllers : In the Model/View/Controller design pattern, all\n    user interaction goes through controllers. In a webapplication\n    setting this means that every time a URL gets requested, exactly one\n    controller gets invoked. The exact dynamics of this will be\n    explained in [[URL Mapping]].    core : A folder that contains CodeIgniter specific files. These\n    are not relevant for the understanding of OpenML.    helpers : This folder contains many convenience functions.\n    Wikipedia states: \u201cA convenience function is a non-essential\n    subroutine in a programming library or framework which is intended\n    to ease commonly performed tasks\u201d. For example the\n     file_upload_helper.php  contains many functions that\n    assist with uploading of files. Please note that a helper function\n    must be explicitly loaded in either the autoload config or the files\n    that uses its functions.    libraries : Similar to sparks, this folder contains libraries\n    specifically written for CodeIgniter. For example, the library used\n    for all user management routines is in this folder.    models : In the Model/View/Controller design pattern, models\n    represent the state of the system. In a webapplication setting, you\n    could say that a model is the link to the database. In OpenML,\n    almost all tables of the database are represented by a model. Each\n    model has general functionality applicable to all models (e.g.,\n    retrieve all records, retrieve record with constraints, insert\n    record) and functionality specific to that model (e.g., retrieve a\n    dataset that has certain data properties). Most models extend an\n    (abstract) base class, located in the  abstract  folder.\n    This way, all general functionality is programmed and maintained in\n    one place.    third_party : Although the name might suggests differently, this\n    folder contains all OpenML Java libraries.    views : In the Model/View/Controller design pattern, the views\n    are the way information is presented on the screen. In a\n    webapplication setting, a view usually is a block of (PHP generated)\n    HTML code. The most notable view is  frontend_main.php ,\n    which is the template file determining the main look and feel of\n    OpenML. Every single page also has its own specific view (which is\n    parsed within  frontend_main.php ). These pages can be\n    found (categorized by controller and name) in the  pages \n    folder. More about this structure is explained in\n    [[URL Mapping]].",
            "title": "openml_OS"
        },
        {
            "location": "/WebApp-(PHP)/#frontend",
            "text": "Architecture and libraries involved in generating the frontend functions.",
            "title": "Frontend"
        },
        {
            "location": "/WebApp-(PHP)/#code_1",
            "text": "https://github.com/openml/website/tree/master/openml_OS/views",
            "title": "Code"
        },
        {
            "location": "/WebApp-(PHP)/#high-level",
            "text": "All pages are generated by first loading  frontend_main.php . This creates the 'shell' in which the content is loaded. It loads all css and javascript libraries, and contains the html for displaying headers and footers.",
            "title": "High-level"
        },
        {
            "location": "/WebApp-(PHP)/#create-new-page",
            "text": "The preferred method is creating a new folder into the folder <root_directory>/openml_OS/views/pages/frontend \nThis page can be requested by http://www.openml.org/frontend/page/<folder_name> \nor just http://www.openml.org/<folder_name> \nThis method is preferred for human readable webpages, where the internal\nactions are simple, and the output is complex. We will describe the\nfiles that can be in this folder.    pre.php : Mandatory file. Will be executed first. Do not make\n    this file produce any output! Can be used to pre-render data, or set\n    some variables that are used in other files.    body.php : Highly recommended file. Intended for displaying the\n    main content of this file. Will be rendered at the right location\n    within the template file ( frontend_main.php ).    javascript.php : Non-mandatory file. Intended for javascript\n    function on which  body.php  relies. Will be rendered within a\n    javascript block in the header of the page.    post.php : Non mandatory file. Will only be executed when a POST\n    request is done (e.g., when a HTML form was send using the POST\n    protocol). Will be executed after  pre.php , but before the\n    rendering process (and thus, before  body.php  and\n     javascript.php ). Should handle the posted input, e.g., file\n    uploads.    It is also recommended to add the newly created folder to the mapping in\nthe  routes.php  config file. This way it can also be requested by the\nshortened version of the URL. (Note that we deliberately avoided to\nauto-load all pages into this file using a directory scan, as this makes\nthe webplatform slow. )  For more information, see [[URL Mapping]].",
            "title": "Create new page"
        },
        {
            "location": "/Java-App/",
            "text": "The Java App is used for a number of OpenML components, such as the ARFF parser and Evaluation engine, which depend on the Weka API. It is invoked from the OpenML API by means of a CLI interface. Typically, a call looks like this:\n\n\njava -jar webapplication.jar -config \"api_key=S3CR3T_AP1_K3Y\" -f evaluate_run -r 500\n\n\nWhich in this case executes the webapplication jar, invokes the function \"evaluate run\" and gives it parameter run id 500. The config parameter can be used to set some config items, in this case the api_key is mandatory. Every OpenML user has an api_key, which can be downloaded from their \nOpenML profile page\n. The response of this function is a call to the OpenML API uploading evaluation results to the OpenML database. Note that in this case the PHP website invokes the Java webapplication, which makes a call to the PHP website again, albeit another endpoint. \n\n\nThe webapplication does not have direct writing rights into the database. All communication to the database goes by means of the \nOpenML Connector\n, which communicates with the OpenML API. As a consequence, the webapplication could run on any system, i.e., there is no formal need for the webapplication to be on the same server as the website code. This is important, since this created modularity, and not all servers provide a command line interface to PHP scripts.\n\n\nAnother example is the following:\n\n\njava -jar webapplication -config \"api_key=S3CR3T_AP1_K3Y\" -f all_wrong -r 81,161 -t 59\n\n\nWhich takes a comma separated list of run ids (no spaces) and a task id as input and outputs the test examples on the dataset on which all algorithms used in the runs produced wrong examples (in this case, weka.BayesNet_K2 and weka.SMO, respectively). An error will be displayed if there are runs not consistent with the task id in there. \n\n\nExtending the Java App\n\n\nThe bootstrap class of the webapplication is\n\n\norg.openml.webapplication.Main\n\n\nIt automatically checks authentication settings (such as api_key) and the determines which function to invoke. \n\n\nIt uses a switch-like if - else contruction to facilitate the functionalities of the various functions. Additional functions can be added to this freely. From there on, it is easy to add functionality to the webapplication. \n\n\nParameters are handled using the Apache Commons CommandLineParser class, which makes sure that the passed parameters are available to the program. \n\n\nIn order to make new functionalities available to the website, there also needs to be programmed an interface to the function, somewhere in the website. The next section details on that. \n\n\nInterfacing from the OpenML API\n\n\nBy design, the REST API is not allowed to communicate with the Java App. All interfaces with the Java webapplication should go through other controllers of the PHP CodeIgniter framework., for example api_splits. Currently, the website features two main API's. These are represented by a Controller. Controllers can be found in the folder openml_OS/controllers. Here we see:\n* api_new.php, representing the REST API\n* api_splits.php, representing an API interfacing to the Java webapplication.",
            "title": "Java Backend"
        },
        {
            "location": "/Java-App/#extending-the-java-app",
            "text": "The bootstrap class of the webapplication is  org.openml.webapplication.Main  It automatically checks authentication settings (such as api_key) and the determines which function to invoke.   It uses a switch-like if - else contruction to facilitate the functionalities of the various functions. Additional functions can be added to this freely. From there on, it is easy to add functionality to the webapplication.   Parameters are handled using the Apache Commons CommandLineParser class, which makes sure that the passed parameters are available to the program.   In order to make new functionalities available to the website, there also needs to be programmed an interface to the function, somewhere in the website. The next section details on that.",
            "title": "Extending the Java App"
        },
        {
            "location": "/Java-App/#interfacing-from-the-openml-api",
            "text": "By design, the REST API is not allowed to communicate with the Java App. All interfaces with the Java webapplication should go through other controllers of the PHP CodeIgniter framework., for example api_splits. Currently, the website features two main API's. These are represented by a Controller. Controllers can be found in the folder openml_OS/controllers. Here we see:\n* api_new.php, representing the REST API\n* api_splits.php, representing an API interfacing to the Java webapplication.",
            "title": "Interfacing from the OpenML API"
        }
    ]
}